#!/bin/bash

drl() 
{
  drll=`echo $1 | awk '{
    if (match($1,"/")==1) cpath=$1;
    else cpath=ENVIRON["PWD"]"/"$1;
    print cpath;
  }'`
  drlr=""
  for (( i=2 ; 1 ; ++i )) ; do
    drlc=`echo $drll | cut -d/ -f-$i`
    if test -L $drlc ; then 
      drlr=`echo \`ls -l $drlc | cut -d\> -f2\``
    else
      drls=`echo $drll | cut -d/ -f$i`
      if [ "$drls" != "." ] ; then
        drlr=$drlr"/"$drls
      fi
    fi
    if [ "$drlc" = "$drll" ] ; then break ; fi
  done
  if [ "$drlr" != "$1" ] ; then 
    drl $drlr
  else
    echo $drlr
  fi
}

rmr () {  
  for file in * ; do                                                          
    if [ -d $file ] ; then                                                       
      cd $file                                                                  
      rmr "$1" $2
      cd ..                                                             
    fi
  done  
  for i in $1 ; do    
    rm -f $2 $i                                                                         
  done
}                                                                               
TIME=`date`
SRUNPATH=""
SBINPATH=""
RESULTS=""
ANALYSIS=""
SLIBPATH="#"
SOPTIONS=""
BASENAME=""
BATCH="PBS"
BOPTIONS=""
NICE=""

print_help() {
  echo "run version 1.0" && echo && \
  echo "options: -p <path>      read configuration from path <path>" && \
  echo "         -b <binpath>   take executeable from path <binpath>" && \
  echo "         -r <results>   write results to path <path>/<results>" && \
  echo "         -a <analysis>  write analysis output to path <path>/<analysis>" && \
  echo "         -e <events>    generate <events> events" && \
  echo "         -n <name>      set basic filename to <name>" && \
  echo "         -l <libpath>   define library path <libpath>" && \
  echo "         -o <option>    define commandline option <option>" && \
  echo "         -B <system>    select batch system <system>" && \
  echo "         -C <checkfile> write check file <checkfile>" && \
  echo "         -O <option>    define batch system option <option>" && \
  echo "         -H <host>      run job locally on <host>" && \
  echo "         -N <level>     set nice level for nohup" && \
  echo "         -T <events>    generate <events> testevents" && \
  echo "         -E <time>      generate jobs with expected runtime <time>" && \
  echo "         -Q <option>    define batch option <option> for split jobs" && \
  echo "         -S             submit job to batch system" && \
  echo "         -R             run job via nohup" && \
  echo "         -h             display this help and exit" && \
  echo
}

while getopts :p:b:r:a:e:n:l:o:B:C:O:H:N:E:T:Q:SRh OPT
do
  case $OPT in
  p) SRUNPATH=$OPTARG ;; 
  b) SBINPATH=$OPTARG ;; 
  r) RESULTS=$OPTARG ;; 
  a) ANALYSIS=$OPTARG ;; 
  e) EVENTS=$OPTARG ;; 
  n) BASENAME=$OPTARG ;; 
  l) SLIBPATH=$OPTARG ;; 
  o) SOPTIONS=$SOPTIONS" "$OPTARG ;; 
  B) BATCH=$OPTARG ;; 
  C) SLOGFILE=$OPTARG ;; 
  O) BOPTIONS=$OPTARG ;; 
  H) RHOST=$OPTARG ;;
  N) NICE=$OPTARG ;;
  E) ETIME=$OPTARG ;; 
  T) TEVENTS=$OPTARG ;; 
  Q) EBOPT=$OPTARG ;; 
  S) SUBMIT=TRUE ;;
  R) RUN=TRUE ;;
  h) print_help && exit 0 ;;
  \?)
    shift `expr $OPTIND - 1`
    echo -n "run: error: unrecognized option "
    if [ $OPTARG != "-" ]; then echo "'-$OPTARG'. try '--help'"
    else echo "'$1'. try '--help'"
    fi
    print_help && exit 1
  esac
done
if [ "$SBINPATH" = "" ]; then SBINPATH="." ; fi
if [ "$SRUNPATH" = "" ]; then SRUNPATH="./" ; fi
if [ "$RESULTS" = "" ]; then RESULTS="./" ; fi
if [ "$ANALYSIS" = "" ]; then ANALYSIS="./" ; fi
if [ "$BASENAME" = "" ]; then BASENAME="job" ; fi
$SBINPATH/Sherpa --version > /dev/null 2>&1
if (( $? != 0 )) ; then
  for (( i=1 ; 1 ; ++i )); do
    SBINPATH=`echo $PATH | cut -d: -f$i`
    $SBINPATH/Sherpa --version > /dev/null 2>&1
    if (( $? == 0 )) ; then break; fi
    if [ "$SBINPATH" = "" ] ; then
      echo "run: Sherpa executeable not found. abort."
      exit 1
    fi
  done
fi
BINPATH=`drl $SBINPATH`
echo -e "run: Sherpa found in '$BINPATH'"
RUNPATH=`drl $SRUNPATH`
if ! test -d $RUNPATH ; then
  echo "run: setup directory '$RUNPATH' does not exist"
  echo "run: abort"
  exit 2
fi
echo -e "run: template path set to '$RUNPATH'"
if ! test -d $SLIBPATH ; then 
  if ! test -d $RUNPATH ; then SLIBPATH=$PWD"/"$RUNPATH
  else SLIBPATH=$RUNPATH
  fi
fi
LIBPATH=`drl $SLIBPATH`
echo -e "run: lib path set to '$LIBPATH'"
if [ ! "$BATCH" = "PBS" ] && [ ! "$BATCH" = "SGE" ] ; then 
  echo "run: error: invalid batch system: '$BATCH'"
  echo "run: supported batch systems are: 'PBS' / 'SGE'"
  exit 3
fi

COUNTER=0
LOGPATH=$PWD
SETUPPATH=$LOGPATH"/"$BASENAME
while test -d $SETUPPATH"_"$COUNTER ; do
  (( ++COUNTER ))
done
SETUPPATH=$SETUPPATH"_"$COUNTER
LOGFILE="run.log"
FILE=$BASENAME"_"$COUNTER".sh"

echo "run: creating run path '$SETUPPATH'"
mkdir $SETUPPATH
if ! test -d $LIBPATH ; then 
  echo "grid_run: library path not found. abort."
  exit 4
fi
cp -pu $RUNPATH/* $SETUPPATH >> /dev/null 2>&1
if [ "$RESULTS" != "" ]; then mkdir $SETUPPATH/$RESULTS; fi

echo "" > $FILE
if [ "$SUBMIT" = "TRUE" ] ; then 
  if [ "$BATCH" = "SGE" ] ; then
    echo "#$ -j y" >> $FILE
    echo "#$ -o $SETUPPATH" >> $FILE
    echo "#$ -N $FILE.$BATCH" >> $FILE
    if [ "$BOPTIONS" != "" ]; then
      echo "#$ "$BOPTIONS >> $FILE
    fi
  else
    echo "#"$BATCH" -oe" >> $FILE
    echo "#"$BATCH" -o $FILE.$BATCH" >> $FILE
    echo "#"$BATCH" -m ae" >> $FILE
    if [ "$BOPTIONS" != "" ]; then
      echo "#"$BATCH" "$BOPTIONS >> $FILE
    fi
  fi
  echo "" >> $FILE
  echo -e "ulimit -c0 -f1048576\n" >> $FILE
  echo "EVENTS=$EVENTS" >> $FILE
  echo "" >> $FILE
  echo "BINPATH=\"$BINPATH\"" >> $FILE
  echo "LIBPATH=\"$LIBPATH\"" >> $FILE
  echo "RUNPATH=\"$SETUPPATH\"" >> $FILE
  echo "LOGFILE=\"$LOGFILE\"" >> $FILE
  echo "" >> $FILE
  echo "cd \$RUNPATH" >> $FILE
  echo "" >> $FILE
  echo "CNT=0; while test -f \$LOGFILE\"_\"\$CNT; do (( ++CNT )); done" >> $FILE
  echo "if test -f \$LOGFILE; then mv \$LOGFILE \$LOGFILE\"_\"\$CNT; fi" >> $FILE
  echo "" >> $FILE
  echo "echo \"\" > \$LOGFILE" >> $FILE
  echo "echo \"HOSTNAME    = \$HOSTNAME\" >> \$LOGFILE" >> $FILE
  echo "echo \"HOME        = \$HOME\" >> \$LOGFILE" >> $FILE
  echo "echo \"USER        = \$USER\" >> \$LOGFILE" >> $FILE
  echo "echo \"\" >> \$LOGFILE" >> $FILE
  if [ "$BATCH" = "SGE" ] ; then
    echo "echo \"JOB_ID      = \$JOB_ID\" >> \$LOGFILE" >> $FILE
    echo "echo \"JOB_NAME    = \$JOB_NAME\" >> \$LOGFILE" >> $FILE
    echo "echo \""$BATCH"_TASK_ID = \$"$BATCH"_TASK_ID\" >> \$LOGFILE" >> $FILE
    echo "echo \"QUEUE       = \$QUEUE\" >> \$LOGFILE" >> $FILE
    echo "echo \"TMPDIR      = \$TMPDIR\" >> \$LOGFILE" >> $FILE
  else
    echo "echo \""$BATCH"_JOBID     = \$"$BATCH"_JOBID\" >> \$LOGFILE" >> $FILE
    echo "echo \""$BATCH"_JOBNAME   = \$"$BATCH"_JOBNAME\" >> \$LOGFILE" >> $FILE
    echo "echo \""$BATCH"_O_QUEUE   = \$"$BATCH"_O_QUEUE\" >> \$LOGFILE" >> $FILE
    echo "echo \""$BATCH"_O_WORKDIR = \$"$BATCH"_O_WORKDIR\" >> \$LOGFILE" >> $FILE
  fi
  echo "echo \"\" >> \$LOGFILE" >> $FILE
  echo "" >> $FILE
  echo "echo \"Submitted on "$TIME"\" >> \$LOGFILE" >> $FILE
  echo "echo \"Started on   \`date\`\" >> \$LOGFILE" >> $FILE
  echo "" >> $FILE
  echo "echo \"\" >> \$LOGFILE" >> $FILE
  echo "" >> $FILE
else
  echo "#!/bin/bash" >> $FILE
  echo "" >> $FILE
  echo -e "ulimit -c0 -f1048576\n" >> $FILE
  echo "EVENTS=$EVENTS" >> $FILE
  echo "" >> $FILE
  echo "BINPATH=\"$BINPATH\"" >> $FILE
  echo "LIBPATH=\"$LIBPATH\"" >> $FILE
  echo "RUNPATH=\"$SETUPPATH\"" >> $FILE
  echo "LOGFILE=\$SETUPPATH\"$LOGFILE\"" >> $FILE
  echo "" >> $FILE
  echo "cd \$RUNPATH" >> $FILE
  echo "" >> $FILE
fi
echo "export PATH=\$BINPATH:\$PATH" >> $FILE
echo "" >> $FILE

CMDL="Sherpa SHERPA_CPP_PATH=\$LIBPATH"; CMDR="";
if [ "$RESULTS" != "" ]; then CMDL=$CMDL" RESULT_DIRECTORY=$RESULTS"; fi
if [ "$SOPTIONS" != "" ]; then CMDR=$CMDR" $SOPTIONS"; fi
if [ "$ETIME" = "" ]; then
  if [ "$ANALYSIS" != "" ]; then echo -en "$CMDL ANALYSIS_OUTPUT=$ANALYSIS" >> $FILE; fi
  if [ "$EVENTS" != "" ]; then echo -en " EVENTS=\$EVENTS" >> $FILE ; fi
else
  if [ "$ANALYSIS" != "" ]; then echo -en "$CMDL ANALYSIS_OUTPUT=$ANALYSIS" >> $FILE; fi
  if [ "$EVENTS" != "" ]; then echo -en " EVENTS=$TEVENTS" >> $FILE ; fi
fi
echo -e "$CMDR 2>&1 >> \$LOGFILE \n" >> $FILE

if [ "$ETIME" != "" ]; then
  echo -e "declare -i NREQ NSUB CSEEDS\n" >> $FILE
  echo "CSEEDS=0" >> $FILE
  echo "generate_seeds() {" >> $FILE
  echo "  if [ \"\$1\" == \"\" ]; then" >> $FILE
  echo "    SEEDS=\$SEEDS\" \"\$2" >> $FILE
  echo "    (( ++CSEEDS ))" >> $FILE
  echo "  else" >> $FILE
  echo "    for i in \$1; do" >> $FILE
  echo "      REM=\"\"" >> $FILE
  echo "      for j in \$1; do " >> $FILE
  echo "        if [ \"\$j\" != \"\$i\" ]; then REM=\$REM\" \"\$j; fi" >> $FILE
  echo "      done" >> $FILE
  echo "      generate_seeds \"\$REM\" \$2\$i" >> $FILE
  echo "    done" >> $FILE
  echo "  fi" >> $FILE
  echo -e "}\n" >> $FILE
  echo -e "generate_seeds \"1 2 3 4 5 6\"\n" >> $FILE
  echo "PTIME=\`cat \$LOGFILE | grep \"Event $TEVENTS \" | awk '{ print \$4; }'\`" >> $FILE
  echo -e "NREQ=\`echo \"scale=0; \$EVENTS/$TEVENTS*\$PTIME/($ETIME*3600)+1\" | bc -q\`" >> $FILE
  echo -e "EEVENTS=\`echo \"scale=0; \$EVENTS/\$NREQ\" | bc -q\`" >> $FILE
  echo -e "\necho -e \"generate \$NREQ jobs with \$EEVENTS events each\" >> \$LOGFILE.split\n\nNSUB=0" >> $FILE
  echo "for I in \$SEEDS; do" >> $FILE
  echo "  if (( ++NSUB > NREQ )); then exit; fi" >> $FILE
  echo "  echo -e \"cd \"\$RUNPATH\"\n\n\"\\" >> $FILE
  echo "\"export PATH=\$BINPATH:\\\$PATH\n\n\"\\" >> $FILE
  echo "\"$CMDL \"\\" >> $FILE
  SANALYSIS=`echo $ANALYSIS | sed 's/\///g'`
  echo -n "\"ANALYSIS_OUTPUT=$SANALYSIS" >> $FILE
  echo "_\$I/ RANDOM_SEED=\$I EVENTS=\$EEVENTS \"\\" >> $FILE
  echo "\"$CMDR 2>&1 > "$BASENAME"_"$COUNTER"_\$I.log\" > "$BASENAME"_"$COUNTER"_\$I" >> $FILE
  echo "  chmod 777 "$BASENAME"_"$COUNTER"_\$I" >> $FILE
  echo "  qsub $EBOPT "$BASENAME"_"$COUNTER"_\$I 2>&1 >> \$LOGFILE.split" >> $FILE
  echo "done" >> $FILE
  echo "anasum -pl4 -i\""$SANALYSIS"_*/\" -o"$SANALYSIS"_sum/" > sum_jobs
  chmod 777 sum_jobs
  mv sum_jobs $SETUPPATH
fi

chmod 777 $FILE
mv $FILE $SETUPPATH
if [ "$SUBMIT" = "TRUE" ] ; then
  cd $SETUPPATH
  qsub $FILE 
  cd $LOGPATH
elif [ "$RUN" = "TRUE" ] ; then
  sync
  RCOUNTER=0
  ssh -q $RHOST exit 
  while (( $? != 0 )) && (( $RCOUNTER < 5 )) ; do
    (( ++RCOUNTER ))
    if (( RCOUNTER > 1 )) ; then
      echo "run: host '"$RHOST"' not available."
    fi
    read -p "run: where shall your job '"$BASENAME"_"$COUNTER"' be run ? " RHOST
    ssh -q $RHOST exit 
  done
  ssh -q $RHOST exit 
  if (( $? ==0 )) ; then
    if [ "$NICE" = "" ] ; then
      ( ssh $RHOST "sync && ( nohup $SETUPPATH/$FILE > /dev/null ) &" ) &
    else 
      ( ssh $RHOST "sync && ( nohup nice -$NICE $SETUPPATH/$FILE > /dev/null ) &" ) &
    fi
  else 
    echo "run: error: cannot submit job '"$BASENAME"_"$COUNTER"'"
  fi 
fi
if ! [ "$SLOGFILE" = "" ] ; then
  if test -f $SLOGFILE; then 
    cp $SLOGFILE $SLOGFILE~ 
  else echo >> $SLOGFILE~; fi
sed "1 i print(){\\
  if test -f \$1; then\\
    if tail -1 \$1 | grep -q -etotal -eUser; then\\
      tail -2 \$1 | awk '{ print \$0; exit; }';\\
      else tail -1 \$1;\\
    fi;\\
  else echo \\\\\"not running\\\\\";\\
  fi\\
}\\
list(){\\
  echo -e \"===> \`echo \$1 | awk '{ n=split(\$1,a,\"/\"); print a[n]; }'\` <===\"\\
  if test -d \$1; then\\
    echo \"master: \`print \$1/\$2\`\"\\
    for I in \$1/"$BASENAME"_"$COUNTER"_*.log; do if test -f \$I; then\\
      echo \"\`echo \$I | awk '{\\
        split(\$1,a,\""$BASENAME"_"$COUNTER"_\"); split(a[2],b,\".log\");\\
        print b[1]; }'\`: \`print \$I\`\"\\
    fi; done\\
  fi\\
  echo\\
}\\
# end list
/print()/,/end\ list/ d
$ a \
list $SETUPPATH $LOGFILE" < $SLOGFILE~ > $SLOGFILE
  chmod 755 $SLOGFILE
fi
echo "run: done with job '"$BASENAME"_"$COUNTER"'"

# mode:shell-script
# sh-indentation:2
