#! /usr/bin/env python

from optparse import OptionParser, OptionGroup
import sys, os, glob, shutil
from subprocess import Popen, PIPE

## Try to load faster but non-standard cElementTree module
try:
    import xml.etree.cElementTree as ET
except ImportError:
    try:
        import cElementTree as ET
    except ImportError:
        try:
            import xml.etree.ElementTree as ET
        except:
            sys.stderr.write("Can't load the ElementTree XML parser: please install it!\n")
            sys.exit(1)


usage = """Webpages from histogram files written out by Rivet.
You can specify multiple aida files to be compared and/or have some of them
merged before plotting.

Examples:
  source /path/to/rivetenv.sh
  %prog [options] <aidafile> [<aidafile>  <file1>,<file2>,<file3>,<merged>  ...]
"""


parser = OptionParser(usage=usage)
parser.add_option("-o", "--outputdir", dest="OUTPUTDIR",
                  default="./plots", help="directory for webpage output.")

opts, args = parser.parse_args()

try:
    datadir = Popen(["rivet-config", "--datadir"], stdout=PIPE).communicate()[0].split()[0]
except:
    print "Error: Didn't find rivet-config. Have you sourced rivetenv.sh?"
    exit(1)

try:
    os.makedirs(opts.OUTPUTDIR)
except:
    print "Error: Directory '%s' already exists. Set -o to something else." % opts.OUTPUTDIR
    exit(1)

## potentially merge aida files (if they have been listed with ",")
aidafiles = list()
for aidafile in args:
    subruns = [subrun.strip() for subrun in aidafile.split(",")]
    if len(subruns) > 2:
        ## merge aida files separated by ","
        newfilename = subruns[-1]
        if os.path.exists(newfilename):
            newfilename = "merged."+newfilename
        else:
            subruns.pop()
        cmd = [os.path.join(sys.path[0], "aidamerge")]
        cmd.extend(subruns)
        cmd.append("-o")
        cmd.append(newfilename)
        Popen(cmd).wait();
        print "Merged %s aida files into %s." % (subruns, newfilename)
        aidafiles.append(newfilename)
    else:
        aidafiles.append(aidafile)

## get set of analyses/reffiles involved in the runs
analyses = set()
reffiles = list()
for aidafile in aidafiles:
    aidafilepath = os.path.abspath(aidafile)
    if not os.access(aidafilepath, os.R_OK):
        print "Error: cannot read from %s" % aidafile
        exit(2)
    tree = ET.parse(aidafilepath)
    for dps in tree.findall("dataPointSet"):
        analysis = dps.get("path")[1:]
        analyses.add(analysis)
        if os.access(os.path.join(datadir, analysis+".aida"), os.R_OK):
            reffiles.append("%s/%s.aida" % (datadir, analysis))


## run compare-histos to get plain .dat files from .aida
ch_cmd = ["compare-histos"]
ch_cmd.append("--mc-errs")
if len(aidafiles)+len(reffiles)<2:
    ch_cmd.append("--show-ref-only")
    ch_cmd.append("--no-ratio")
for file in aidafiles+reffiles:
    ch_cmd.append("%s" % os.path.abspath(file))
Popen(ch_cmd, cwd=opts.OUTPUTDIR).wait()


index = open(os.path.join(opts.OUTPUTDIR, "index.html"), "w")
for analysis in sorted(analyses):
    anapath = os.path.join(opts.OUTPUTDIR, analysis)
    os.mkdir(anapath)
    anaindex = open(os.path.join(anapath, "index.html"), 'w')
    anaindex.write("<html>\n")
    
    datfiles = glob.glob("%s/%s_*.dat" % (opts.OUTPUTDIR, analysis))
    for fulldatfile in datfiles:
        shutil.move(fulldatfile, anapath)
        datfile = os.path.basename(fulldatfile)

        ## make-plots run for each .dat file
        mp_cmd = ["make-plots"]
        mp_cmd.append("--full-range")
        if os.access(os.path.expanduser("~/.make-plots"), os.R_OK):
            mp_cmd.append("-c")
            mp_cmd.append(os.path.expanduser("~/.make-plots"))
        mp_cmd.append(datfile)
        Popen(mp_cmd, cwd=anapath).wait()

        psfile = datfile.replace(".dat", ".ps")
        if os.access(os.path.join(anapath, psfile), os.R_OK):
            # convert to png and add to webpage
            pngfile = datfile.replace(".dat", ".png")
            Popen(["convert", "-density", "100", psfile, pngfile], cwd=anapath)
            anaindex.write('<div style="float:left;">')
            anaindex.write('<a href="%s" style="font-size:small;text-decoration:none;font-weight:bold;">' % psfile)
            anaindex.write('%s:<br><img border="0" src="%s"></a></div>\n' % (psfile, pngfile))

    anaindex.write("</html>\n")
    index.write('<h1><a href="%s/index.html" style="text-decoration:none;">%s</a></h1>\n' %(analysis, analysis))
    description = Popen(["rivet", "--show-analysis", analysis], stdout=PIPE).communicate()[0]
    index.write('<pre>%s</pre>\n' % description)
