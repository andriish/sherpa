#!/bin/bash

get_filenames()
{

  if test -f $1; then
    gfnrf=$(awk 'BEGIN{ 
        fns["BEAM_DATA_FILE"]="Beam.dat"; 
        fns["ISR_DATA_FILE"]="ISR.dat"; 
        fns["MODEL_DATA_FILE"]="Model.dat"; 
        fns["ME_DATA_FILE"]="ME.dat"; 
        if ('$2'==0) fns["MI_DATA_FILE"]="MI.dat"; 
        fns["SHOWER_DATA_FILE"]="Shower.dat"; 
        fns["FRAGMENTATION_DATA_FILE"]="Fragmentation.dat"; 
      }{
        if ($1 in fns) fns[$1]=$3;
      }
      END{ 
        for (i in fns) print " "fns[i];
        print ","fns["ME_DATA_FILE"];
      }' < $1)
    gfncf=$1" "$(echo $gfnrf | cut -d, -f1)" Integration.dat"
    gfnme=$(echo $gfnrf | cut -d, -f2)
  else
    gfncf="Beam.dat ISR.dat Model.dat ME.dat \
      Integration.dat MI.dat Shower.dat Fragmentation.dat"
    gfnme="ME.dat"
  fi
  if test $2 -eq 0; then
    if test -f $gfnme; then
      gfnrf=$(awk 'BEGIN{ 
          fns["PROCESSFILE"]="Processes.dat"; 
          fns["SELECTORFILE"]="Selector.dat"; 
        }{
          if ($1 in fns) fns[$1]=$3;
        }
        END{ 
          for (i in fns) print " "fns[i];
        }' < $gfnme)
      gfncf=$gfncf" "$gfnrf
    else
      gfncf=$gfncf" Processes.dat Selector.dat"
    fi
  fi
  echo $gfncf

}

replace_spaces() {

  awk '{ 
    if ($1=="!" || match($0,"!")==1) print $0;
    else {
      n=split($0,a,"="); 
      if (n==0) {
        print $0;
      }
      else {
        cmd="sed -e\"s/ /_/g\""; 
        printf a[1] |& cmd; 
        close(cmd,"to"); 
        cmd |& getline line; 
        close(cmd);
        m=split(line,b,"_");
        printf b[1];
        for (j=2;j<=m;++j) {
          if (b[j]!="" && b[j]!="\t" && b[j]!=" ") 
	    printf "_"b[j];
          else printf " "b[j];
        } 
        for (i=2;i<=n;++i) printf "="a[i]; 
        printf "\n"; 
      }
    }
  }' < $1 > $1~
  mv $1~ $1

}

update_kfcodes() {
if ! test -f $1.old; then cp $1 $1.old; fi
sed ':a;N;$!ba
s/\(\s\)27/\1#27#/g
s/\(\s\)-27/\1#-27#/g
s/\(\s\)28/\1#28#/g
s/\(\s\)-28/\1#-28#/g
s/\(\s\)71/\1#71#/g
s/\(\s\)-71/\1#-71#/g
s/\(\s\)62/\1#62#/g
s/\(\s\)-62/\1#-62#/g
s/\(\s\)53/\1#53#/g
s/\(\s\)-53/\1#-53#/g
s/\(\s\)44/\1#44#/g
s/\(\s\)-44/\1#-44#/g
s/\(\s\)81/\1#81#/g
s/\(\s\)-81/\1#-81#/g
s/\(\s\)72/\1#72#/g
s/\(\s\)-72/\1#-72#/g
s/\(\s\)63/\1#63#/g
s/\(\s\)-63/\1#-63#/g
s/\(\s\)54/\1#54#/g
s/\(\s\)-54/\1#-54#/g
s/\(\s\)45/\1#45#/g
s/\(\s\)-45/\1#-45#/g
s/\(\s\)82/\1#82#/g
s/\(\s\)-82/\1#-82#/g
s/\(\s\)73/\1#73#/g
s/\(\s\)-73/\1#-73#/g
s/\(\s\)64/\1#64#/g
s/\(\s\)-64/\1#-64#/g
s/\(\s\)55/\1#55#/g
s/\(\s\)-55/\1#-55#/g
s/\(\s\)46/\1#46#/g
s/\(\s\)-46/\1#-46#/g
s/\(\s\)83/\1#83#/g
s/\(\s\)-83/\1#-83#/g
s/\(\s\)74/\1#74#/g
s/\(\s\)-74/\1#-74#/g
s/\(\s\)65/\1#65#/g
s/\(\s\)-65/\1#-65#/g
s/\(\s\)56/\1#56#/g
s/\(\s\)-56/\1#-56#/g
s/\(\s\)47/\1#47#/g
s/\(\s\)-47/\1#-47#/g
s/\(\s\)75/\1#75#/g
s/\(\s\)-75/\1#-75#/g
s/\(\s\)66/\1#66#/g
s/\(\s\)-66/\1#-66#/g
s/\(\s\)76/\1#76#/g
s/\(\s\)-76/\1#-76#/g
s/\(\s\)31/\1#31#/g
s/\(\s\)-31/\1#-31#/g
s/\(\s\)41/\1#41#/g
s/\(\s\)-41/\1#-41#/g
s/\(\s\)32/\1#32#/g
s/\(\s\)-32/\1#-32#/g
s/\(\s\)51/\1#51#/g
s/\(\s\)-51/\1#-51#/g
s/\(\s\)42/\1#42#/g
s/\(\s\)-42/\1#-42#/g
s/\(\s\)33/\1#33#/g
s/\(\s\)-33/\1#-33#/g
s/\(\s\)24/\1#24#/g
s/\(\s\)-24/\1#-24#/g
s/\(\s\)23/\1#23#/g
s/\(\s\)-23/\1#-23#/g
s/\(\s\)61/\1#61#/g
s/\(\s\)-61/\1#-61#/g
s/\(\s\)52/\1#52#/g
s/\(\s\)-52/\1#-52#/g
s/\(\s\)43/\1#43#/g
s/\(\s\)-43/\1#-43#/g
' < $1.old > $1~
sed ':a;N;$!ba
s/\(\s\)#27#/\139/g
s/\(\s\)#-27#/\1-39/g
s/\(\s\)#28#/\140/g
s/\(\s\)#-28#/\1-40/g
s/\(\s\)#71#/\11000011/g
s/\(\s\)#-71#/\1-1000011/g
s/\(\s\)#62#/\11000003/g
s/\(\s\)#-62#/\1-1000003/g
s/\(\s\)#53#/\11000006/g
s/\(\s\)#-53#/\1-1000006/g
s/\(\s\)#44#/\11000023/g
s/\(\s\)#-44#/\1-1000023/g
s/\(\s\)#81#/\11000012/g
s/\(\s\)#-81#/\1-1000012/g
s/\(\s\)#72#/\11000013/g
s/\(\s\)#-72#/\1-1000013/g
s/\(\s\)#63#/\11000005/g
s/\(\s\)#-63#/\1-1000005/g
s/\(\s\)#54#/\12000002/g
s/\(\s\)#-54#/\1-2000002/g
s/\(\s\)#45#/\11000025/g
s/\(\s\)#-45#/\1-1000025/g
s/\(\s\)#82#/\11000014/g
s/\(\s\)#-82#/\1-1000014/g
s/\(\s\)#73#/\11000015/g
s/\(\s\)#-73#/\1-1000015/g
s/\(\s\)#64#/\12000001/g
s/\(\s\)#-64#/\1-2000001/g
s/\(\s\)#55#/\12000004/g
s/\(\s\)#-55#/\1-2000004/g
s/\(\s\)#46#/\11000035/g
s/\(\s\)#-46#/\1-1000035/g
s/\(\s\)#83#/\11000016/g
s/\(\s\)#-83#/\1-1000016/g
s/\(\s\)#74#/\12000011/g
s/\(\s\)#-74#/\1-2000011/g
s/\(\s\)#65#/\12000003/g
s/\(\s\)#-65#/\1-2000003/g
s/\(\s\)#56#/\12000006/g
s/\(\s\)#-56#/\1-2000006/g
s/\(\s\)#47#/\11000021/g
s/\(\s\)#-47#/\1-1000021/g
s/\(\s\)#75#/\12000013/g
s/\(\s\)#-75#/\1-2000013/g
s/\(\s\)#66#/\12000005/g
s/\(\s\)#-66#/\1-2000005/g
s/\(\s\)#76#/\12000015/g
s/\(\s\)#-76#/\1-2000015/g
s/\(\s\)#31#/\125/g
s/\(\s\)#-31#/\1-25/g
s/\(\s\)#41#/\11000024/g
s/\(\s\)#-41#/\1-1000024/g
s/\(\s\)#32#/\135/g
s/\(\s\)#-32#/\1-35/g
s/\(\s\)#51#/\11000002/g
s/\(\s\)#-51#/\1-1000002/g
s/\(\s\)#42#/\11000037/g
s/\(\s\)#-42#/\1-1000037/g
s/\(\s\)#33#/\136/g
s/\(\s\)#-33#/\1-36/g
s/\(\s\)#24#/\123/g
s/\(\s\)#-24#/\1-23/g
s/\(\s\)#23#/\1-24/g
s/\(\s\)#-23#/\124/g
s/\(\s\)#61#/\11000001/g
s/\(\s\)#-61#/\1-1000001/g
s/\(\s\)#52#/\11000004/g
s/\(\s\)#-52#/\1-1000004/g
s/\(\s\)#43#/\11000022/g
s/\(\s\)#-43#/\1-1000022/g
' < $1~ > $1
rm $1~
}

print_help() {
    echo "update_datfiles version 1.0" && echo && \
    echo "options: -i <file> act on input file <file>" && \
    echo "         -r        undo changes on input files" && \
    echo "         -d        diff after applying changes" && \
    echo "         -n        do not combine into one file" && \
    echo "         -c        combine into one file only" && \
    echo "         -o        clean up all old files after finish" && \
    echo "         -h        display this help and exit" && echo
}

ifile='Run*dat'
revert=0
diffs=0
nocomb=0
conly=0
cleanup=0
while getopts :i:rdncho OPT
do
  case $OPT in
  i) ifile=$OPTARG ;;
  r) revert=1 ;;
  d) diffs=1 ;;
  n) nocomb=1 ;;
  c) conly=1 ;;
  o) cleanup=1 ;;
  h) print_help && exit 0 ;;
  \?)
    shift `expr $OPTIND - 1`
      echo -n "update_datfiles: error: unrecognized option "
      if [ $OPTARG != "-" ]; then echo "'-$OPTARG'. try '-h'"
      else echo "'$1'. try '-h'"
      fi
      print_help && exit 1
  esac
done

if test -f Particle.dat; then
  echo -e "\033[1mwarning:\033[31m 'Particle.dat' is no longer used."
  echo -e "Please add your modifications to the model section of Run.dat."
  echo -e "\033[0m"
  mv Particle.dat Particle.dat.old
fi
if test -f Hadron.dat; then
  echo -e "\033[1mwarning:\033[31m 'Hadron.dat' is no longer used."
  echo -e "Please add your modifications to the fragmentation section."
  echo -e "\033[0m"
  mv Hadron.dat Hadron.dat.old
fi
if test $conly -eq 0; then
  for j in $ifile; do
    if ! test -f $j; then continue; fi
    files=`get_filenames $j 1`
    if test $revert -eq 1; then
      echo "reverting Sherpa input files"
      for i in $files; do
        echo -n "reverting '$i' ... "
        if ! test -f $i.old && test -f $i; then 
          echo "backup file missing"
        else cp $i.old $i; echo "done"; fi
      done
    else
      echo "updating Sherpa input files"
      for i in $files; do
        if ! test -f $i; then continue; fi
        echo -n "adjusting '$i' ... "
        if ! test -f $i.old; then cp $i $i.old; fi
        replace_spaces $i
        sed -e's/Num._Accuracy/NUM_ACCURACY/g' \
            -e's/Running alpha_S/Running_alpha_S/g' \
            -e's/LESHOUCHESINPUT/SLHA_INPUT/g' < $i > $i~
        mv $i~ $i
        echo "done"
      done
      update_kfcodes "Processes.dat"
      echo "old inputs stored in '*.old'"
    fi
    if test $diffs -eq 1; then
      for i in $files; do
        if ! diff -q $i.old $i > /dev/null; then
          echo "==> diff '$i.old' vs. '$i' <=="
          diff $i.old $i
        fi
      done
    fi
  done
fi

if test $nocomb -eq 1; then exit; fi

for j in $ifile; do
  rundat=`echo $j | sed -e's/\*/./g'`
  cf=`get_filenames $j 0`
  echo "writing setup in '$rundat' {"
  echo -n > $rundat.new
  for i in $cf; do
    if ! test -f $i; then 
      echo "  file '$i' not found ... skipped"
      continue
    fi
    echo "  adding file '$i'"
    nfname=`echo $i | awk '{ split($1,a,".dat"); print tolower(a[1]); }'`
    echo "("$nfname"){" >> $rundat.new
      if test -f $i; then sed -e's/^/  /g' < $i >> $rundat.new; fi
    echo "}("$nfname")" >> $rundat.new
  done
  sed -e'/BEAM_DATA_FILE/ d' \
      -e'/ISR_DATA_FILE/ d' \
      -e'/MODEL_DATA_FILE/ d' \
      -e'/ME_DATA_FILE/ d' \
      -e'/MI_DATA_FILE/ d' \
      -e'/SHOWER_DATA_FILE/ d' \
      -e'/FRAGMENTATION_DATA_FILE/ d' \
      -e'/PROCESSFILE/ d' \
      -e'/SELECTORFILE/ d' -i $rundat.new
  mv $rundat.new $rundat
  echo "} done"
done

if test $cleanup -eq 1; then
  rm *.old
  olddatfiles=$(ls *.dat | grep -v "Run\.dat" | grep -v "Analysis\.dat")
  for i in $olddatfiles; do
    if test -d .svn; then
      svn rm --force $i
    else
      rm $i
    fi
  done
  if test -d .svn; then
    svn rm --force Hadron.dat
    svn rm --force Particle.dat
  fi
fi
