#!/bin/bash

drl() 
{
  drll=`echo $1 | awk '{
    if (match($1,"/")==1) cpath=$1;
    else cpath=ENVIRON["PWD"]"/"$1;
    print cpath;
  }'`
  drlr=""
  for (( i=2 ; 1 ; ++i )) ; do
    drlc=`echo $drll | cut -d/ -f-$i`
    if test -L $drlc ; then 
      drlr=`echo \`ls -l $drlc | cut -d\> -f2\``
    else
      drls=`echo $drll | cut -d/ -f$i`
      if [ "$drls" != "." ] ; then
        drlr=$drlr"/"$drls
      fi
    fi
    if [ "$drlc" = "$drll" ] ; then break ; fi
  done
  if [ "$drlr" != "$1" ] ; then 
    drl $drlr
  else
    echo $drlr
  fi
}

esc()
{
  echo $1 | awk '{
    res=$0;
    gsub("\\\\","\\\\",res);
    gsub("\"","\\\"",res);
    print res;
  }'
}

print_help() 
{
  echo "grid_run version 1.0" && echo && \
  echo "options: -p <path>      read configuration from path <path>" && \
  echo "         -b <binpath>   take executeable from path <binpath>" && \
  echo "         -r <results>   write results to path <path>/<results>" && \
  echo "         -a <analysis>  write analysis output to path <path>/<analysis>" && \
  echo "         -e <events>    generate <events> events" && \
  echo "         -n <name>      set basic filename to <name>" && \
  echo "         -l <libpath>   define library path <libpath>" && \
  echo "         -o <option>    define commandline option <option>" && \
  echo "         -s <envfile>   set environment settings file to <envfile>" && \
  echo "         -C <checkfile> write check file <checkfile>" && \
  echo "         -T <events>    generate <events> testevents" && \
  echo "         -E <time>      generate jobs with expected runtime <time>" && \
  echo "         -g <option>    define job submit option <option>" && \
  echo "         -G <option>    define jdl file option <option>" && \
  echo "         -M             do not submit main grid job" && \
  echo "         -N             do not submit split grid jobs" && \
  echo "         -h             display this help and exit" && \
  echo
}

TIME=`date`
RESULTS=""
ANALYSIS=""
SRUNPATH=""
SBINPATH=""
SLIBPATH="#"
SOPTIONS=""
BASENAME=""
ENVFILE="/mt/phenogrid/set-ippp-env.sh"
MSUBMIT="TRUE"
SSUBMIT="TRUE"
while getopts :p:b:r:a:e:n:l:o:s:C:E:T:g:G:MNh OPT
do
  case $OPT in
  p) SRUNPATH=$OPTARG ;; 
  b) SBINPATH=$OPTARG ;; 
  r) RESULTS=$OPTARG ;; 
  a) ANALYSIS=$OPTARG ;; 
  e) EVENTS=$OPTARG ;; 
  n) BASENAME=$OPTARG ;; 
  l) SLIBPATH=$OPTARG ;; 
  o) SOPTIONS=$SOPTIONS" "$OPTARG ;; 
  s) ENVFILE=$OPTARG ;;
  C) SLOGFILE=$OPTARG ;; 
  E) ETIME=$OPTARG ;; 
  T) TEVENTS=$OPTARG ;; 
  g) EDGOPTS=$EDGOPTS" "$OPTARG ;; 
  G) GMISC=`echo -e "$GMISC\n$OPTARG"` && 
     EGMISC=`echo -e "$EGMISC\n\`esc \"$OPTARG\"\`"` ;; 
  M) MSUBMIT=FALSE ;; 
  N) SSUBMIT=FALSE ;; 
  h) print_help && exit 0 ;;
  \?)
    shift `expr $OPTIND - 1`
    echo -n "grid_run: error: unrecognized option "
    if [ $OPTARG != "-" ]; then echo "'-$OPTARG'. try '--help'"
    else echo "'$1'. try '--help'"
    fi
    print_help && exit 1
  esac
done
if ! ( type grid-proxy-info > /dev/null 2>&1 ); then
  echo "grid_run: grid-proxy-info command not found. abort."
  exit
fi
PROXYTIME=`grid-proxy-info | grep timeleft | awk '{ split($3,a,":"); \
  print a[1]*3600+a[2]*60+a[3]; }'`
if [ "$PROXYTIME" = "" ] || test $PROXYTIME -lt 3600; then
  echo "grid_run: your proxy expires in less than 1 hour." \
"time left: `grid-proxy-info | grep timeleft | awk '{ print $3; }'`"
  echo "grid_run: please renew your proxy"
  exit
fi
if [ "$SBINPATH" = "" ]; then SBINPATH="." ; fi
if [ "$SRUNPATH" = "" ]; then SRUNPATH="." ; fi
if [ "$RESULTS" = "" ]; then RESULTS="./" ; fi
if [ "$ANALYSIS" = "" ]; then ANALYSIS="./" ; fi
if [ "$BASENAME" = "" ]; then BASENAME="job" ; fi
$SBINPATH/Sherpa --version > /dev/null 2>&1
if (( $? != 0 )) ; then
  for (( i=1 ; 1 ; ++i )); do
    SBINPATH=`echo $PATH | cut -d: -f$i`
    $SBINPATH/Sherpa --version > /dev/null 2>&1
    if (( $? == 0 )) ; then break; fi
    if [ "$SBINPATH" = "" ] ; then
      echo "grid_run: Sherpa executeable not found. abort."
      exit 1
    fi
  done
fi
BINPATH=`drl $SBINPATH`
echo -e "grid_run: Sherpa found in '$BINPATH'"
RUNPATH=`drl $SRUNPATH`
if ! test -d $RUNPATH ; then
  echo "grid_run: setup directory '$RUNPATH' does not exist"
  echo "grid_run: abort"
  exit 2
fi
echo -e "grid_run: template path set to '$RUNPATH'"
if ! test -d $SLIBPATH ; then 
  if ! test -d $RUNPATH ; then SLIBPATH=$PWD"/"$RUNPATH
  else SLIBPATH=$RUNPATH
  fi
fi
LIBPATH=`drl $SLIBPATH`
echo -e "grid_run: lib path set to '$LIBPATH'"

COUNTER=0
LOGPATH=`drl $PWD`
SETUPPATH=$LOGPATH"/"$BASENAME
while test -d $SETUPPATH"_"$COUNTER ; do
  (( ++COUNTER ))
done
SETUPPATH=$SETUPPATH"_"$COUNTER
LOGFILE="run.log"
FILE=$BASENAME"_"$COUNTER".sh"

echo "grid_run: creating run path '$SETUPPATH'"
mkdir $SETUPPATH
if ! test -d $LIBPATH ; then 
  echo "grid_run: library path not found. abort."
  exit 4
fi
cp -u $RUNPATH/* $SETUPPATH >> /dev/null 2>&1
if [ "$RESULTS" != "" ]; then mkdir $SETUPPATH/$RESULTS; fi

echo "grid_run: writing run script '$FILE'"
echo -e "#!/bin/bash\n" > $FILE
echo -e "source $ENVFILE\n" >> $FILE
echo "BINPATH=\"$BINPATH\"" >> $FILE
echo "LIBPATH=\"$LIBPATH\"" >> $FILE
echo -e "RUNPATH=\"$SETUPPATH\"\n" >> $FILE
echo -e "LOGFILE=\"$LOGFILE\"\nEVENTS=$EVENTS\n" >> $FILE
echo -e "cd \$RUNPATH\n" >> $FILE
echo "CNT=0; while test -f \$LOGFILE\"_\"\$CNT; do (( ++CNT )); done" >> $FILE
echo -e "if test -f \$LOGFILE; then mv \$LOGFILE \$LOGFILE\"_\"\$CNT; fi\n" >> $FILE
echo "echo \"Submitted on "$TIME"\" >> \$LOGFILE" >> $FILE
echo -e "echo \"Started on   \`date\`\" >> \$LOGFILE\n" >> $FILE
echo -e "export PATH=\$BINPATH:\$PATH\n" >> $FILE

CMDL="Sherpa SHERPA_CPP_PATH=\$LIBPATH"; CMDR="";
if [ "$RESULTS" != "" ]; then CMDL=$CMDL" RESULT_DIRECTORY=$RESULTS"; fi
if [ "$SOPTIONS" != "" ]; then CMDR=$CMDR" $SOPTIONS"; fi
if [ "$ETIME" = "" ]; then
  if [ "$ANALYSIS" != "" ]; then echo -en "$CMDL ANALYSIS_OUTPUT=$ANALYSIS" >> $FILE; fi
  if [ "$EVENTS" != "" ]; then echo -en " EVENTS=\$EVENTS" >> $FILE ; fi
else
  if [ "$ANALYSIS" != "" ]; then echo -en "$CMDL ANALYSIS_OUTPUT=$ANALYSIS" >> $FILE; fi
  if [ "$EVENTS" != "" ]; then echo -en " EVENTS=$TEVENTS" >> $FILE ; fi
fi
echo -e "$CMDR >> \$LOGFILE 2>&1\n" >> $FILE
echo -e "chmod ugo+rwX -fR \$RUNPATH \$LIBPATH\n" >> $FILE

if [ "$ETIME" != "" ]; then
  echo "grid_run: appending split option"
  echo -e "declare -i NREQ NSUB CSEEDS\n" >> $FILE
  echo "CSEEDS=0" >> $FILE
  echo "generate_seeds() {" >> $FILE
  echo "  if [ \"\$1\" == \"\" ]; then" >> $FILE
  echo "    SEEDS=\$SEEDS\" \"\$2" >> $FILE
  echo "    (( ++CSEEDS ))" >> $FILE
  echo "  else" >> $FILE
  echo "    for i in \$1; do" >> $FILE
  echo "      REM=\"\"" >> $FILE
  echo "      for j in \$1; do " >> $FILE
  echo "        if [ \"\$j\" != \"\$i\" ]; then REM=\$REM\" \"\$j; fi" >> $FILE
  echo "      done" >> $FILE
  echo "      generate_seeds \"\$REM\" \$2\$i" >> $FILE
  echo "    done" >> $FILE
  echo "  fi" >> $FILE
  echo -e "}\n" >> $FILE
  echo -e "generate_seeds \"1 2 3 4 5 6\"\n" >> $FILE
  echo "PTIME=\`cat \$LOGFILE | grep \"Event $TEVENTS \" | awk '{ print \$4; }'\`" >> $FILE
  echo -e "NREQ=\`echo \"scale=0; \$EVENTS/$TEVENTS*\$PTIME/($ETIME*3600)+1\" | bc -q\`" >> $FILE
  echo -e "EEVENTS=\`echo \"scale=0; \$EVENTS/\$NREQ\" | bc -q\`" >> $FILE
  echo -e "\necho -e \"generate \$NREQ jobs with \$EEVENTS events each\" > \$LOGFILE.split\n\nNSUB=0" >> $FILE
  echo "for I in \$SEEDS; do" >> $FILE
  echo "  if (( ++NSUB > NREQ )); then exit; fi" >> $FILE
  echo "  echo -e \"cd \"\$RUNPATH\"\n\n\"\\" >> $FILE
  echo "\"source $ENVFILE\n\n\"\\" >> $FILE
  echo "\"export PATH=\$BINPATH:\\\$PATH\n\n\"\\" >> $FILE
  echo "\"$CMDL \"\\" >> $FILE
  SANALYSIS=`echo $ANALYSIS | sed 's/\///g'`
  echo -n "\"ANALYSIS_OUTPUT=$SANALYSIS" >> $FILE
  echo "_\$I/ RANDOM_SEED=\$I EVENTS=\$EEVENTS \"\\" >> $FILE
  echo "\"$CMDR > job_\$I.log 2>&1\n\n\"\\" >> $FILE
  echo "\"chmod ugo+rwX -fR .\n\" > job_\$I" >> $FILE
  echo "  chmod ugo+rwx job_\$I" >> $FILE
  echo "  echo \"Executable = \\\"job_\$I\\\";\" > job_\$I.jdl" >> $FILE
  echo "  echo \"StdOutput = \\\"run.out\\\"; StdError = \\\"run.err\\\";\" >> job_\$I.jdl" >> $FILE
  echo "  echo \"OutputSandbox = {}; InputSandbox = {\\\"job_\$I\\\"};\" >> job_\$I.jdl" >> $FILE
  echo "  echo \"$EGMISC\" >> job_\$I.jdl" >> $FILE
  echo "  chmod ugo+rw job_\$I.jdl" >> $FILE
  echo -e "done\n" >> $FILE
  echo -e "#!/bin/bash\n" > submit_jobs
  echo -e "echo \"\$0 started at \`date\`\" >> \$0.log\n" >> submit_jobs
  echo "while (( 1 )); do" >> submit_jobs
  echo "  sed '/run/ d' < \$0.log > \$0.log~" >> submit_jobs
  echo "  if test -f $LOGFILE.split && test $LOGFILE.split -nt $LOGFILE ; then" >> submit_jobs
  echo "    while (( 1 )); do" >> submit_jobs
  echo "      sed '/run/ d' < \$0.log > \$0.log~" >> submit_jobs
  echo "      PROXYTIME=\`grid-proxy-info | grep timeleft | awk '{ split(\$3,a,\":\"); \\" >> submit_jobs
  echo "        print a[1]*3600+a[2]*60+a[3]; }'\`" >> submit_jobs
  echo "      if [ \"\$PROXYTIME\" != \"\" ] && test \$PROXYTIME -gt 3600; then" >> submit_jobs
  echo "        for I in job_*.jdl; do edg-job-submit $EDGOPTS \$I >> \$0.log~ 2>&1; done" >> submit_jobs
  echo "        sed \"\$ a \$0 last run at \`date\`\" < \$0.log~ > \$0.log" >> submit_jobs
  echo -e "        exit\n      fi" >> submit_jobs
  echo "      sed \"\$ a \$0 last run at \`date\`\" < \$0.log~ > \$0.log" >> submit_jobs
  echo "      sleep 300" >> submit_jobs
  echo -e "      if ! test -f \$0.log; then exit; fi\n    done\n  fi" >> submit_jobs
  echo "  sed \"\$ a \$0 last run at \`date\`\" < \$0.log~ > \$0.log" >> submit_jobs
  echo -e "  sleep 120\n  if ! test -f \$0.log; then exit; fi\ndone" >> submit_jobs
  echo "anasum -pl4 -i\""$SANALYSIS"_*/\" -o"$SANALYSIS"_sum/" > sum_jobs
  chmod ugo+rwx submit_jobs sum_jobs
  mv submit_jobs sum_jobs $SETUPPATH
fi

echo -e "grid_run: setting permissions"
chmod ugo+rwx $FILE
mv $FILE $SETUPPATH
chmod ugo+rw -R $SETUPPATH
cd $SETUPPATH
JDLFILE=$BASENAME"_"$COUNTER".jdl"
echo "Executable = \"$FILE\";" > $JDLFILE
echo -e "StdOutput = \"run.out\"; StdError = \"run.err\";" >> $JDLFILE
echo -e "OutputSandbox = {\"run.out\",\"run.err\"}; InputSandbox = {\"$FILE\"};" >> $JDLFILE
echo "$GMISC" >> $JDLFILE
if [ "$MSUBMIT" = "TRUE" ] ; then
  echo "grid_run: submitting grid job"
  edg-job-submit $EDGOPTS $JDLFILE 2>&1 | tee $BASENAME"_"$COUNTER".log"
  if [ "$ETIME" != "" ] && [ "$SSUBMIT" = "TRUE" ] ; then
    echo "grid_run: running split submit script"
    ( $PWD/submit_jobs > /dev/null 2>&1 ) &
  fi
fi
cd $LOGPATH
if ! [ "$SLOGFILE" = "" ] ; then
  if test -f $SLOGFILE; then 
    cp $SLOGFILE $SLOGFILE~ 
  else echo >> $SLOGFILE~; fi
sed "1 i list(){\\
  echo -e \"===> \`echo \$1 | awk '{ n=split(\$1,a,\"/\"); print a[n]; }'\` <===\"\\
  if test -d \$1; then\\
    echo \"master: \`if test -f \$1/\$2; then tail -1 \$1/\$2; else echo \\\\\"not running\\\\\"; fi\`\"\\
    for I in \$1/job_*.log; do if test -f \$I; then\\
      echo \"\`echo \$I | awk '{ split(\$1,a,\"job_\"); split(a[2],b,\".log\"); print b[1]; }'\`: \`tail -1 \$I\`\"\\
    fi; done\\
  fi\\
  echo\\
}\\
# end list
/list()/,/end\ list/ d
$ a \
list $SETUPPATH $LOGFILE" < $SLOGFILE~ > $SLOGFILE
  chmod 755 $SLOGFILE
fi
echo "grid_run: done with job '"$BASENAME"_"$COUNTER"'"

# mode:shell-script
# sh-indentation:2
