# If you have questions or requests contact Valentin Boettcher <hiro@protagon.space> (Gitlab: vale9811)

image: "registry.gitlab.com/sherpa-team/sherpa-docker-build/slim"

variables:
  DOCKER_DRIVER: overlay2
#  CONFIGURE_FLAGS: --enable-analysis --enable-ewsud --with-libzip=/usr --with-lhapdf=install
  CONFIGURE_FLAGS: -DSHERPA_ENABLE_TESTING=ON -DSHERPA_ENABLE_ANALYSIS:BOOL=ON -DSHERPA_ENABLE_TESTING:BOOL=ON  -DSHERPA_ENABLE_EWSUD:BOOL=ON -DLibZip_ROOT_DIR=/usr
  MAKE_FLAGS: -j4

.build_template: &build
  stage: build
  before_script:
    # set up ccache
    - yum -y install cmake3  wget python2-lhapdf lhapdf-devel
    - lhapdf install PDF4LHC21_40_pdfas
    - mkdir -p ccache
    - export CCACHE_BASEDIR=${PWD}
    - export CCACHE_DIR=${PWD}/ccache
    - export CCACHE_COMPILERCHECK=content
    # enable gold linker
    - ln -sf ld.gold /usr/bin/ld
  # accelerate git-clone by making it shallow
  variables:
    GIT_DEPTH: "3"
  # cache ccache
  cache:
    paths:
      - ccache/

.build_ubuntu_template: &build_ubuntu
  stage: build
  before_script:
    # set up ccache
    - apt-get -y install cmake  wget
    - mkdir -p ccache_ubuntu
    - export CCACHE_BASEDIR=${PWD}
    - export CCACHE_DIR=${PWD}/ccache_ubuntu
    - export CCACHE_COMPILERCHECK=content
    # enable gold linker
    - ln -sf ld.gold /usr/bin/ld.gold
  # accelerate git-clone by making it shallow
  variables:
    GIT_DEPTH: "3"
  # cache ccache
  cache:
    paths:
      - ccache_ubuntu/

#
# Build
#

# default build with gcc
build:
  <<: *build
  script:
    - mkdir -p build
    - cd build
    - cmake3 -S ../ -B .  -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER=g++ -DCMAKE_C_COMPILER=gcc -DCMAKE_INSTALL_PREFIX="$PWD/install" $CONFIGURE_FLAGS
    - make $MAKE_FLAGS
    - ctest3 . --output-on-failure
    - make install
  # store what's required to run the tests
  artifacts:
    expire_in: 2 days
    paths:
      - build/install
      - Examples/CI/

# default build with gcc on top of the Rivet image
build-rivet:
  <<: *build_ubuntu
  image: "registry.gitlab.com/sherpa-team/sherpa-docker-build/analysis"
  stage: build
  script:
    - apt-get -y install cmake  wget
    - wget https://lhapdf.hepforge.org/downloads/?f=LHAPDF-6.5.3.tar.gz -O LHAPDF-6.5.3.tar.gz
    - tar zxfv LHAPDF-6.5.3.tar.gz
    - cd LHAPDF-6.5.3
    - ./configure --disable-python --without-doxygen 
    - make install -j 8
    - cd ..
    - lhapdf install PDF4LHC21_40_pdfas
    - mkdir -p build-rivet
    - cd build-rivet
    - cmake -S ../ -B . -DSHERPA_ENABLE_TESTING:BOOL=ON -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER=g++ -DCMAKE_C_COMPILER=gcc -DCMAKE_INSTALL_PREFIX="$PWD/install" -DSHERPA_ENABLE_ANALYSIS:BOOL=ON -DSHERPA_ENABLE_EWSUD:BOOL=ON -DSHERPA_ENABLE_INSTALL_LIBZIP:BOOL=ON -DSHERPA_ENABLE_RIVET=ON -DSHERPA_ENABLE_HEPMC3=ON -DRivet_ROOT_DIR=$(rivet-config --prefix)
    - make $MAKE_FLAGS
    - ctest . --output-on-failure
    - cmake --install .
    - ldd $(pwd)/install/bin/Sherpa
    - ls 
    - mv Tests/test-rivet-LO_Z ../
  # store what's required to run the tests
  artifacts:
    expire_in: 2 days
    paths:
      - build-rivet/install
      - Examples/CI/
      - test-rivet-LO_Z/Analysis.yoda.gz
      - test-rivet-LO_Z/deviations.pdf
      - test-rivet-LO_Z/rivet-plots
# build with clang and -Werror
build-clang-strict:
  <<: *build
  script:
    - mkdir -p build-clang-strict
    - cd build-clang-strict
    - cmake3 -S ../ -B .  -DCMAKE_CXX_FLAGS="-Werror -Wno-error=unused-function "-DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang -DCMAKE_INSTALL_PREFIX="$PWD/install" $CONFIGURE_FLAGS
    - make $MAKE_FLAGS
    - ctest3 . --output-on-failure
    - make install
  # store what's required to run the tests
  artifacts:
    expire_in: 2 days
    paths:
      - build-clang-strict/install
      - Examples/CI/

build-manual:
  stage: build
  image: registry.gitlab.com/sherpa-team/sherpa-docker-build
  script:
    - yum -y install cmake3 wget
    - pip3 install -r Manual/requirements.txt
    - cmake3 -S . -B build  -DSHERPA_ENABLE_MANUAL=ON -DLibZip_DIR=/usr -DSHERPA_ENABLE_INSTALL_LHAPDF:BOOL=ON  
    - cd build/Manual
    - make
    - make sherpamanual_html
  artifacts:
    expire_in: 2 days
    paths:
      - build/Manual
  rules:
    - changes:
        - Manual/**/*
      when: always
    - when: never

#
# Deploy
#


# Rebuild the Website to include this tag in the changelogs.
trigger_pages:
  stage: deploy
  variables:
    GIT_STRATEGY: none  # we only need the artifacts from the build
  rules:
    - if: '$CI_COMMIT_TAG'
      when: always
    - when: never
  script:
    - "curl -X POST -F token=$PAGES_TRIGGER_TOKEN -F ref=master https://gitlab.com/api/v4/projects/8892644/trigger/pipeline"
  needs: []

# build the dist-tarball
dist:
  stage: deploy
  rules:
    - if: '$CI_COMMIT_TAG'
      when: always
    - when: never
  image: registry.gitlab.com/sherpa-team/sherpa-docker-build
  script:
    - pip3 install -r Manual/requirements.txt
    - cmake3 -S . -B build  -DSHERPA_ENABLE_MANUAL=ON -DLibZip_DIR=/usr -DSHERPA_ENABLE_INSTALL_LHAPDF:BOOL=ON   # build the manual into the dist tarball
    - make -C build/ dist

    # upload to gitlab releases
    - "REL=$(git describe --abbrev=0 --tags)"
    - "TARBALL=$(ls *.tar.gz | cut -d ' ' -f1)"
    - 'URL=$(curl --request POST --header "PRIVATE-TOKEN: $UPLOAD_TOKEN" --form "file=@./$TARBALL" https://gitlab.com/api/v4/projects/13884060/uploads | grep -o -P "\"url\":\"(.*?)\"" | sed "s/\"//g" | sed "s/url://")' # TODO: use regex
    - "echo $URL"
    - 'curl --request POST --header "PRIVATE-TOKEN: $UPLOAD_TOKEN" --data name="$TARBALL" --data url="https://gitlab.com/vale9811/sherpa$URL" "https://gitlab.com/api/v4/projects/13884060/releases/$REL/assets/links"'
    - 'curl --request POST --header "PRIVATE-TOKEN: $UPLOAD_TOKEN" --data name="Manual" --data url="https://sherpa-team.gitlab.io/sherpa/$REL/" "https://gitlab.com/api/v4/projects/13884060/releases/$REL/assets/links"'

# Build Manual
pages:
  image: registry.gitlab.com/sherpa-team/sherpa-docker-build
  stage: deploy
  script:
    - cd Manual
    - git branch -r | grep -v '\->' | while read remote; do git branch --track "${remote#origin/}" "$remote"; done
    - git fetch --all
    - git checkout master  # we only build with master config, because
                           # this will get uploaded globaly
    - git pull
    - pip3 install -r requirements.txt
    - pip3 install sphinx-multiversion
    - bash .build_versioned.sh build
    - mv build/_multi ../public
  artifacts:
    paths:
    - public
  rules:
    - changes:
        - Manual/**/*
      when: always
    - when: never

