#ifndef Primordial_KPerp_IC
#define Primordial_KPerp_IC

#include "Primordial_KPerp.H"

namespace SHERPA {

  inline void Primordial_KPerp::SetKPerpMean(const double _m_kperpmean,unsigned int beam)
  { if (beam<2) m_kperpmean[beam]=ATOOLS::dabs(_m_kperpmean); }

  inline double Primordial_KPerp::KPerpMean(unsigned int beam) const
  { if (beam<2) return m_kperpmean[beam]; else return -1.0; }

  inline void Primordial_KPerp::SetKPerpSigma(const double _m_kperpsigma,unsigned int beam)
  { if (beam<2) m_kperpsigma[beam]=ATOOLS::dabs(_m_kperpsigma); }

  inline double Primordial_KPerp::KPerpSigma(unsigned int beam) const
  { if (beam<2) return m_kperpsigma[beam]; else return -1.0; }

  inline void Primordial_KPerp::SetScheme(int _m_scheme)
  { m_scheme=_m_scheme; }

  inline unsigned int Primordial_KPerp::Scheme() const
  { return m_scheme; }

}// end of namespace SHERPA

namespace ATOOLS {

  inline double Sign(const double& a) {return (a<0) ? -1.0 : 1.0;}

}

#endif
