#ifndef MI_Base_IC
#define MI_Base_IC

#include "MI_Base.H"

namespace AMISIC {

  inline void MI_Base::SetStart(double _m_start,unsigned int i)
  { if (i<n_parameter) m_start[i]=_m_start; }

  inline double MI_Base::Start(unsigned int i)
  { return m_start[i]; }

  inline void MI_Base::SetStop(double _m_stop,unsigned int i)
  { if (i<n_parameter) m_stop[i]=_m_stop; }

  inline double MI_Base::Stop(unsigned int i)
  { return m_stop[i]; }

  inline bool MI_Base::StopGeneration(TypeID type)
  { 
    switch (type) {
    case HardEvent:
      return m_stophard;
    case SoftEvent:
      return m_stopsoft;
    case Unknown:
      return m_stophard&&m_stopsoft;
    default:	
      return false;
    }
    return true;
  }

  inline EXTRAXS::XS_Base *MI_Base::XS()
  { return p_xs; }

} // end of namespace AMISIC

#endif
