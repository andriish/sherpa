#ifndef Amisic_IC
#define Amisic_IC

#include "Amisic.H"

namespace AMISIC {
	
  template <class Argument_Type,class Result_Type>
  bool Amisic::Grid_Creator<Argument_Type,Result_Type>::CreateInitialGrid()
  { return InitializeSingleGrid(p_gridhandler[0]); }

  template <class Argument_Type,class Result_Type>
  inline bool Amisic::Grid_Creator<Argument_Type,Result_Type>::CreateOptimizedGrid()
  { return OptimizeSingleGrid(p_gridhandler[0]); }

  template <class Argument_Type,class Result_Type>
  inline void Amisic::Grid_Creator<Argument_Type,Result_Type>::
  SetMaxExtension(std::string _m_maxextension)
  { m_maxextension=_m_maxextension; }

  template <class Argument_Type,class Result_Type>
  inline std::string Amisic::Grid_Creator<Argument_Type,Result_Type>::MaxExtension()
  { return m_maxextension; }

  template <class Argument_Type,class Result_Type>
  inline void Amisic::Grid_Creator<Argument_Type,Result_Type>::
  SetXSExtension(std::string _m_xsextension)
  { m_xsextension=_m_xsextension; }

  template <class Argument_Type,class Result_Type>
  inline std::string Amisic::Grid_Creator<Argument_Type,Result_Type>::XSExtension()
  { return m_xsextension; }

  inline void Amisic::SetInputFile(std::string _m_inputfile)
  { m_inputfile=_m_inputfile; }

  inline std::string Amisic::InputFile()
  { return m_inputfile; }

  inline void Amisic::SetEnvironmentFile(std::string _m_environmentfile)
  { m_environmentfile=_m_environmentfile; }

  inline std::string Amisic::EnvironmentFile()
  { return m_environmentfile; }

  inline void Amisic::SetInputPath(std::string _m_inputpath)
  { m_inputpath=_m_inputpath; }

  inline std::string Amisic::InputPath()
  { return m_inputpath; }

  inline void Amisic::SetOutputPath(std::string _m_outputpath)
  { m_outputpath=_m_outputpath; }

  inline std::string Amisic::OutputPath()
  { return m_outputpath; }

  inline void Amisic::SetStart(GridArgumentType _m_start)
  { m_start=_m_start; }

  inline Amisic::GridArgumentType Amisic::Start()
  { return m_start; }

  inline void Amisic::SetStop(GridArgumentType _m_stop)
  { m_stop=_m_stop; }

  inline Amisic::GridArgumentType Amisic::Stop()
  { return m_stop; }

} // end of namespace AMISIC

#endif
