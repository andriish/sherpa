#ifndef Grid_Creator_IC
#define Grid_Creator_IC

namespace AMISIC {

  template <class Argument_Type,class Result_Type>
  bool Grid_Creator<Argument_Type,Result_Type>::CreateInitialGrid()
  { return InitializeSingleGrid(p_gridhandler[0]); }

  template <class Argument_Type,class Result_Type>
  bool Grid_Creator<Argument_Type,Result_Type>::CreateOptimizedGrid()
  { return OptimizeSingleGrid(p_gridhandler[0]); }

  template <class Argument_Type,class Result_Type>
  void Grid_Creator<Argument_Type,Result_Type>::
  SetMaxExtension(const std::string _m_maxextension)
  { m_maxextension=_m_maxextension; }

  template <class Argument_Type,class Result_Type>
  const std::string Grid_Creator<Argument_Type,Result_Type>::MaxExtension() const
  { return m_maxextension; }

  template <class Argument_Type,class Result_Type>
  void Grid_Creator<Argument_Type,Result_Type>::
  SetXSExtension(const std::string _m_xsextension)
  { m_xsextension=_m_xsextension; }

  template <class Argument_Type,class Result_Type>
  const std::string Grid_Creator<Argument_Type,Result_Type>::XSExtension() const
  { return m_xsextension; }

  template <class Argument_Type,class Result_Type>
  void Grid_Creator<Argument_Type,Result_Type>::
  SetMaxPoints(const long int _m_maxpoints)
  { m_maxpoints[0]=_m_maxpoints; }

  template <class Argument_Type,class Result_Type>
  const long int Grid_Creator<Argument_Type,Result_Type>::MaxPoints() const
  { return m_maxpoints[0]; }

} // end of namespace AMISIC

#endif
