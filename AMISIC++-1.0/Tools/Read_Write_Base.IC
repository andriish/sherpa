#ifndef Read_Write_Base_IC
#define Read_Write_Base_IC

#include "Read_Write_Base.H"

namespace ATOOLS {

  inline void Read_Write_Base::SetSeperator(const std::string _m_seperator) 
  { m_seperator.clear(); m_seperator.push_back(_m_seperator); }
  
  inline void Read_Write_Base::SetSeperator(const std::vector<std::string> &_m_seperator) 
  { m_seperator.clear(); m_seperator=_m_seperator; }
  
  inline void Read_Write_Base::AddSeperator(const std::string _m_seperator) 
  { m_seperator.push_back(_m_seperator); }
  
  inline void Read_Write_Base::AddSeperator(const std::vector<std::string> &_m_seperator) 
  { for (unsigned int i=0;i<_m_seperator.size();m_seperator.push_back(_m_seperator[i++])); }
  
  inline void Read_Write_Base::SetComment(const std::string _m_comment)       
  { m_comment.clear(); m_comment.push_back(_m_comment); }

  inline void Read_Write_Base::SetComment(const std::vector<std::string> &_m_comment)       
  { m_comment.clear(); m_comment=_m_comment; }
  
  inline void Read_Write_Base::AddComment(const std::string _m_comment)       
  { m_comment.push_back(_m_comment); }
  
  inline void Read_Write_Base::AddComment(const std::vector<std::string> &_m_comment)       
  { for (unsigned int i=0;i<_m_comment.size();m_comment.push_back(_m_comment[i++])); }
  
  inline void Read_Write_Base::SetIgnore(const std::string _m_ignore)       
  { m_ignore.clear(); m_ignore.push_back(_m_ignore); }

  inline void Read_Write_Base::SetIgnore(const std::vector<std::string> &_m_ignore)       
  { m_ignore.clear(); m_ignore=_m_ignore; }
  
  inline void Read_Write_Base::AddIgnore(const std::string _m_ignore)       
  { m_ignore.push_back(_m_ignore); }

  inline void Read_Write_Base::AddIgnore(const std::vector<std::string> &_m_ignore)       
  { for (unsigned int i=0;i<_m_ignore.size();m_ignore.push_back(_m_ignore[i++])); }

  inline void Read_Write_Base::SetBlank(const int _m_blank)                 
  { m_blank.clear(); m_blank.push_back(_m_blank); }
  
  inline void Read_Write_Base::SetBlank(const std::vector<int> &_m_blank)    
  { m_blank.clear(); m_blank = _m_blank; }

  inline void Read_Write_Base::AddBlank(const int _m_blank)                 
  { m_blank.push_back(_m_blank); }

  inline void Read_Write_Base::AddBlank(const std::vector<int> &_m_blank)    
  { for (unsigned int i=0; i<_m_blank.size();m_blank.push_back(_m_blank[i++])); }

  inline void Read_Write_Base::SetFileName(const std::string _m_filename)   
  { if ((_m_filename!=m_filename)&&(p_file!=NULL)) CloseFile(true); m_filename=_m_filename; }

  inline void Read_Write_Base::SetString(const std::string _m_string)       
  { m_string = _m_string; }

  inline void Read_Write_Base::SetOpenMode(const OpenModeID _m_openmode)
  { if ((_m_openmode==Temporary)&&(p_file!=NULL)) CloseFile(true); m_openmode=_m_openmode; }

  inline void Read_Write_Base::SetVectorType(const VectorTypeID _m_vectortype)
  { m_vectortype=_m_vectortype; }

  inline void Read_Write_Base::SetMatrixType(const MatrixTypeID _m_matrixtype)
  { m_matrixtype=_m_matrixtype; }

  inline const std::vector<std::string> &Read_Write_Base::Comment() const           
  { return m_comment; }
  
  inline const std::vector<std::string> &Read_Write_Base::Ignore() const           
  { return m_ignore;     }
  
  inline const std::vector<std::string> &Read_Write_Base::Seperator() const         
  { return m_seperator; }
  
  inline const std::vector<int> &Read_Write_Base::Blank() const            
  { return m_blank; }
  
  inline const std::string Read_Write_Base::FileName() const 
  { return m_filename; }
  
  inline const std::string Read_Write_Base::String() const           
  { return m_string; }
  
  inline const Read_Write_Base::VectorTypeID Read_Write_Base::VectorType() const       
  { return m_vectortype; }
  
  inline const Read_Write_Base::MatrixTypeID Read_Write_Base::MatrixType() const       
  { return m_matrixtype; }
  
  inline const Read_Write_Base::OpenModeID Read_Write_Base::OpenMode() const         
  { return m_openmode; }
  
  inline std::fstream *Read_Write_Base::File()
  { return p_file; }

  template <class Read_Type>
  inline Read_Type Read_Write_Base::NotDefined() 
  { return (Read_Type)0; }
  
  template <class Read_Type>
  inline Read_Type Read_Write_Base::Default() 
  { return (Read_Type)0; }

  inline const std::vector<std::string> &Read_Write_Base::FileContent() const { return m_filecontent; }

  template <> inline int         Read_Write_Base::NotDefined<int>()         { return -32767;     } 
  template <> inline long        Read_Write_Base::NotDefined<long>()        { return -32767;     } 
  template <> inline float       Read_Write_Base::NotDefined<float>()       { return 1.0e-37;    } 
  template <> inline double      Read_Write_Base::NotDefined<double>()      { return 1.0e-37;    } 
  template <> inline std::string Read_Write_Base::NotDefined<std::string>() { return nullstring; } 

  template <> inline int         Read_Write_Base::Default<int>()         { return -32767;     } 
  template <> inline long        Read_Write_Base::Default<long>()        { return -32767;     } 
  template <> inline float       Read_Write_Base::Default<float>()       { return 1.0e-37;    } 
  template <> inline double      Read_Write_Base::Default<double>()      { return 1.0e-37;    } 
  template <> inline std::string Read_Write_Base::Default<std::string>() { return nullstring; } 

} // end of namespace ATOOLS

#endif
