from test_models import sm,heft,mued,mssm,qagc
from test_process import test_process

all_test_procs = []

all_test_procs.append(test_process([25, 25],[25, 25],sm))
all_test_procs.append(test_process([25, 25],[25, 25, 25, 25],sm))
all_test_procs.append(test_process([25, 25],[23, 23],sm))
all_test_procs.append(test_process([25, 25],[24, -24],sm))
all_test_procs.append(test_process([23, -24],[11, -11, -24],sm))
all_test_procs.append(test_process([21, 21],[21, 21],sm))
#all_test_procs.append(test_process([21, 21],[21, 21, 21],sm))
#all_test_procs.append(test_process([21, 21],[21, 21, 21, 21],sm))
all_test_procs.append(test_process([23, 23],[24, -24],sm))
all_test_procs.append(test_process([23, 23],[22, 22, 24, -24],sm))
all_test_procs.append(test_process([23, 23],[23, 23],sm))
all_test_procs.append(test_process([-15, 15],[24, -24],sm))
all_test_procs.append(test_process([-15, 15],[23, 23],sm))
all_test_procs.append(test_process([-15, 15],[23, 22],sm))
all_test_procs.append(test_process([-15, 15],[22, 22],sm))
all_test_procs.append(test_process([15, -15],[25, 25],sm))
all_test_procs.append(test_process([15, -15],[23, 23],sm))
all_test_procs.append(test_process([15, -15],[24, -24],sm))
all_test_procs.append(test_process([15, -15],[24, -24, 23],sm))
all_test_procs.append(test_process([15, 25],[15, 25, 25],sm))
all_test_procs.append(test_process([23, 24],[23, 24],sm))
all_test_procs.append(test_process([11, 23],[11, 23],sm))
all_test_procs.append(test_process([11, 24],[11, 24],sm))
all_test_procs.append(test_process([-11, 11],[-11, 11],sm))
all_test_procs.append(test_process([-11, 11],[-13, 13],sm))
all_test_procs.append(test_process([-11, 11],[12, -12],sm))
all_test_procs.append(test_process([1, -1],[1, -1],sm))
all_test_procs.append(test_process([1, -1],[1, -1, 21],sm))
all_test_procs.append(test_process([1, -1],[1, -1, 21, 21],sm))
all_test_procs.append(test_process([1, -1],[6, -6],sm))
all_test_procs.append(test_process([1, -1],[6, -6, 21],sm))
all_test_procs.append(test_process([11, -12],[11, -12, 22, 22],sm))
all_test_procs.append(test_process([23, 25],[23, 25],sm))
all_test_procs.append(test_process([2, -2],[21, 21],sm))
all_test_procs.append(test_process([2, -2],[2, -2],sm))
all_test_procs.append(test_process([2, -2],[2, -2, 21, 21],sm))
all_test_procs.append(test_process([2, -2],[24, -24],sm))
all_test_procs.append(test_process([2, -2],[23, 23],sm))
all_test_procs.append(test_process([2, -2],[23, 22],sm))
all_test_procs.append(test_process([2, -2],[22, 22],sm))
all_test_procs.append(test_process([2, -2],[3, -3],sm))
all_test_procs.append(test_process([11, -13],[11, -13],sm))
all_test_procs.append(test_process([2, -1],[4, -3],sm))
all_test_procs.append(test_process([2, -3],[4, -1],sm))
all_test_procs.append(test_process([11, -11],[23, 23],sm))
all_test_procs.append(test_process([11, -11],[24, -24],sm))
all_test_procs.append(test_process([11, -11],[13, -13],sm))
all_test_procs.append(test_process([11, -11],[24, -24, 23],sm))
all_test_procs.append(test_process([11, -11],[15, -15],sm))
all_test_procs.append(test_process([11, -11],[15, -15, 25, 25],sm))
all_test_procs.append(test_process([11, -11],[15, -15, 23, 23],sm))
all_test_procs.append(test_process([11, -11],[15, -15, 22, 22],sm))
all_test_procs.append(test_process([11, -11],[11, -11],sm))
all_test_procs.append(test_process([11, -11],[12, -12],sm))
all_test_procs.append(test_process([6, -6],[21, 21],sm))
all_test_procs.append(test_process([6, -6],[23, 22],sm))
all_test_procs.append(test_process([6, -6],[22, 22],sm))
all_test_procs.append(test_process([6, -6],[2, -2],sm))
all_test_procs.append(test_process([6, -6],[24, -24],sm))
all_test_procs.append(test_process([6, -6],[23, 23],sm))
all_test_procs.append(test_process([24, -24],[24, -24],sm))
all_test_procs.append(test_process([24, -24],[23, 23],sm))
all_test_procs.append(test_process([24, -24],[24, -24, 24, -24],sm))

all_test_procs.append(test_process([6, -6],[25, 6, -6],heft))
all_test_procs.append(test_process([6, -6],[25, 2, -2],heft))
all_test_procs.append(test_process([6, -6],[25, 21],heft))
all_test_procs.append(test_process([1, 21],[25, 1],heft))
all_test_procs.append(test_process([1, 21],[9000005, 1, 21],heft))
all_test_procs.append(test_process([21, -2],[9000005, -2],heft))
all_test_procs.append(test_process([21, -2],[25, -2],heft))
all_test_procs.append(test_process([2, -2],[25, 2, -2],heft))
all_test_procs.append(test_process([21, 21],[25, 21],heft))
#all_test_procs.append(test_process([21, 21],[25, 21, 21],heft, 1.0e-4))
all_test_procs.append(test_process([21, 21],[9000005, 21],heft))
#all_test_procs.append(test_process([21, 21],[9000005, 21, 21],heft, 1.0e-4))
all_test_procs.append(test_process([1, -1],[25, 1, -1],heft))
all_test_procs.append(test_process([1, -1],[9000005, 1, -1],heft))
all_test_procs.append(test_process([21, 25],[21, 21],heft))
all_test_procs.append(test_process([21, 2],[9000005, 2],heft))
all_test_procs.append(test_process([21, 2],[25, 2],heft))

all_test_procs.append(test_process([6100011, -6100013],[11, -13],mued, 1.0e-12))
all_test_procs.append(test_process([6100005, 6100005],[5, 5],mued, 1.0e-12))
all_test_procs.append(test_process([5100021, 5100022],[5, -5],mued, 1.0e-12))
all_test_procs.append(test_process([5100011, 5100011],[11, 11],mued, 1.0e-12))
all_test_procs.append(test_process([23, 5100023],[24, -5100024],mued, 1.0e-11))
all_test_procs.append(test_process([5100001, -5100001],[1, -1],mued, 1.0e-12))
all_test_procs.append(test_process([5100021, 5100021],[21, 21],mued, 1.0e-12))
all_test_procs.append(test_process([5100021, 5100021],[5100021, 5100021],mued, 1.0e-12))
all_test_procs.append(test_process([5100015, -5100015],[5, -5],mued, 1.0e-12))
all_test_procs.append(test_process([5100015, -5100016],[5, -6],mued, 1.0e-12))
all_test_procs.append(test_process([5100015, -5100016],[15, -16],mued, 1.0e-12))
all_test_procs.append(test_process([5100002, 5100023],[21, 2],mued, 1.0e-12))
all_test_procs.append(test_process([5100002, -5100002],[2, -2],mued, 1.0e-12))
all_test_procs.append(test_process([6100005, -6100005],[5, -5],mued, 1.0e-12))
all_test_procs.append(test_process([5100011, -5100011],[2, -2],mued, 1.0e-12))
all_test_procs.append(test_process([5100011, -5100011],[22, 22],mued, 1.0e-12))
all_test_procs.append(test_process([5100006, -5100006],[6, -6],mued, 1.0e-12))
all_test_procs.append(test_process([6100006, -6100006],[6, -6],mued, 1.0e-12))
all_test_procs.append(test_process([5100022, 5100022],[6, -6],mued, 1.0e-12))
all_test_procs.append(test_process([23, 22],[5100024, -5100024],mued, 1.0e-12))
all_test_procs.append(test_process([6100015, -6100013],[15, -13],mued, 1.0e-12))
all_test_procs.append(test_process([5100012, -5100012],[24, -24],mued, 1.0e-11))
all_test_procs.append(test_process([5100012, -5100012],[2, -2],mued, 1.0e-12))
all_test_procs.append(test_process([21, 21],[21, 21],mued, 1.0e-12))
all_test_procs.append(test_process([5100011, -5100013],[11, -13],mued, 1.0e-12))
all_test_procs.append(test_process([5100023, 5100023],[-24, 24],mued, 1.0e-11))
all_test_procs.append(test_process([5100023, 5100023],[1, -1],mued, 1.0e-12))
all_test_procs.append(test_process([5100023, 5100023],[5100024, -5100024],mued, 1.0e-12))
all_test_procs.append(test_process([6100011, -6100015],[11, -15],mued, 1.0e-12))
all_test_procs.append(test_process([5100022, 6100015],[22, 15],mued, 1.0e-12))
all_test_procs.append(test_process([6100015, -6100015],[2, -2],mued, 1.0e-12))
all_test_procs.append(test_process([6100015, -6100015],[15, -15],mued, 1.0e-12))
all_test_procs.append(test_process([24, -5100024],[5100023, 22],mued, 1.0e-12))
all_test_procs.append(test_process([24, -5100024],[23, 5100023],mued, 1.0e-11))
all_test_procs.append(test_process([5100021, 21],[5100021, 21],mued, 1.0e-12))
all_test_procs.append(test_process([5100006, 5100006],[6, 6],mued, 1.0e-12))
all_test_procs.append(test_process([5100011, -5100012],[1, -2],mued, 1.0e-12))
all_test_procs.append(test_process([6100006, 6100006],[6, 6],mued, 1.0e-12))
all_test_procs.append(test_process([5100024, -5100024],[23, 23],mued, 1.0e-12))
all_test_procs.append(test_process([5100024, -5100024],[23, 22],mued, 1.0e-12))
all_test_procs.append(test_process([5100024, -5100024],[24, -24],mued, 1.0e-11))
all_test_procs.append(test_process([5100024, -5100024],[22, 22],mued, 1.0e-12))
all_test_procs.append(test_process([5100024, -5100024],[11, -11],mued, 1.0e-12))
all_test_procs.append(test_process([5100024, -5100024],[5100024, -5100024],mued, 1.0e-12))
all_test_procs.append(test_process([5100016, -5100016],[6, -6],mued, 1.0e-12))
all_test_procs.append(test_process([5100016, -5100016],[4, -4],mued, 1.0e-12))
all_test_procs.append(test_process([5100016, -5100016],[23, 23],mued, 1.0e-12))
all_test_procs.append(test_process([5100021, 5100023],[4, -4],mued, 1.0e-12))
all_test_procs.append(test_process([6100011, -6100011],[2, -2],mued, 1.0e-12))
all_test_procs.append(test_process([6100011, -6100011],[11, -11],mued, 1.0e-12))
all_test_procs.append(test_process([6100011, -6100011],[22, 22],mued, 1.0e-12))


all_test_procs.append(test_process([11, 11],[1000011, 1000011],mssm))
all_test_procs.append(test_process([11, 11],[2000011, 2000011],mssm))
all_test_procs.append(test_process([11, 11],[1000011, 2000011],mssm))
all_test_procs.append(test_process([11, -12],[1000011, -1000012],mssm))
all_test_procs.append(test_process([11, -12],[2000011, -1000012],mssm))
all_test_procs.append(test_process([11, -12],[1000013, -1000014],mssm))
all_test_procs.append(test_process([11, -12],[1000015, -1000016],mssm))
all_test_procs.append(test_process([11, -12],[2000015, -1000016],mssm))
all_test_procs.append(test_process([11, -12],[-1000024, 1000022],mssm))
all_test_procs.append(test_process([11, -12],[-1000024, 1000023],mssm))
all_test_procs.append(test_process([11, -12],[-1000024, 1000025],mssm))
all_test_procs.append(test_process([11, -12],[-1000024, 1000035],mssm))
all_test_procs.append(test_process([11, -12],[-1000037, 1000022],mssm))
all_test_procs.append(test_process([11, -12],[-1000037, 1000023],mssm))
all_test_procs.append(test_process([11, -12],[-1000037, 1000025],mssm))
all_test_procs.append(test_process([11, -12],[-1000037, 1000035],mssm))
all_test_procs.append(test_process([-24, 23],[1000011, -1000012],mssm))
all_test_procs.append(test_process([-24, 23],[1000013, -1000014],mssm))
all_test_procs.append(test_process([-24, 23],[1000015, -1000016],mssm))
all_test_procs.append(test_process([-24, 23],[2000015, -1000016],mssm))
all_test_procs.append(test_process([-24, 23],[1000001, -1000002],mssm))
all_test_procs.append(test_process([-24, 23],[1000003, -1000004],mssm))
all_test_procs.append(test_process([-24, 23],[1000005, -1000006],mssm))
all_test_procs.append(test_process([-24, 23],[2000005, -2000006],mssm))
all_test_procs.append(test_process([-24, 23],[1000005, -2000006],mssm))
all_test_procs.append(test_process([-24, 23],[2000005, -1000006],mssm))
all_test_procs.append(test_process([-24, 23],[1000022, -1000024],mssm))
all_test_procs.append(test_process([-24, 23],[1000023, -1000024],mssm))
all_test_procs.append(test_process([-24, 23],[1000025, -1000024],mssm))
all_test_procs.append(test_process([-24, 23],[1000035, -1000024],mssm))
all_test_procs.append(test_process([-24, 23],[1000022, -1000037],mssm))
all_test_procs.append(test_process([-24, 23],[1000023, -1000037],mssm))
all_test_procs.append(test_process([-24, 23],[1000025, -1000037],mssm))
all_test_procs.append(test_process([-24, 23],[1000035, -1000037],mssm))
all_test_procs.append(test_process([-24, 23],[25, -37],mssm))
all_test_procs.append(test_process([-24, 23],[35, -37],mssm))
all_test_procs.append(test_process([-24, 23],[36, -37],mssm))
all_test_procs.append(test_process([-24, 23],[-24, 25],mssm))
all_test_procs.append(test_process([-24, 23],[-24, 35],mssm))
all_test_procs.append(test_process([-24, 23],[-24, 36],mssm))
all_test_procs.append(test_process([-24, 23],[23, -37],mssm))
all_test_procs.append(test_process([1, 21],[1000001, 1000021],mssm))
all_test_procs.append(test_process([1, 21],[2000001, 1000021],mssm))
all_test_procs.append(test_process([21, 23],[1000002, -1000002],mssm))
all_test_procs.append(test_process([21, 23],[2000002, -2000002],mssm))
all_test_procs.append(test_process([21, 23],[2000004, -2000004],mssm))
all_test_procs.append(test_process([21, 23],[1000004, -1000004],mssm))
all_test_procs.append(test_process([21, 23],[1000006, -1000006],mssm, 1.0e-8))
all_test_procs.append(test_process([21, 23],[2000006, -2000006],mssm, 1.0e-8))
all_test_procs.append(test_process([21, 23],[1000006, -2000006],mssm, 1.0e-7))
all_test_procs.append(test_process([21, 23],[1000001, -1000001],mssm))
all_test_procs.append(test_process([21, 23],[2000001, -2000001],mssm))
all_test_procs.append(test_process([21, 23],[1000003, -1000003],mssm))
all_test_procs.append(test_process([21, 23],[2000003, -2000003],mssm))
all_test_procs.append(test_process([21, 23],[1000005, -1000005],mssm, 1.0e-8))
all_test_procs.append(test_process([21, 23],[2000005, -2000005],mssm, 1.0e-8))
all_test_procs.append(test_process([21, 23],[1000005, -2000005],mssm, 1.0e-7))
all_test_procs.append(test_process([24, -24],[13, -13],mssm))
all_test_procs.append(test_process([24, -24],[24, -24],mssm))
all_test_procs.append(test_process([24, -24],[1000011, -1000011],mssm))
all_test_procs.append(test_process([24, -24],[2000011, -2000011],mssm))
all_test_procs.append(test_process([24, -24],[1000013, -1000013],mssm))
all_test_procs.append(test_process([24, -24],[2000013, -2000013],mssm))
all_test_procs.append(test_process([24, -24],[1000015, -1000015],mssm))
all_test_procs.append(test_process([24, -24],[2000015, -2000015],mssm))
all_test_procs.append(test_process([24, -24],[1000015, -2000015],mssm))
all_test_procs.append(test_process([24, -24],[1000012, -1000012],mssm))
all_test_procs.append(test_process([24, -24],[1000014, -1000014],mssm))
all_test_procs.append(test_process([24, -24],[1000016, -1000016],mssm))
all_test_procs.append(test_process([24, -24],[23, 25],mssm))
all_test_procs.append(test_process([24, -24],[23, 35],mssm))
all_test_procs.append(test_process([24, -24],[36, 25],mssm))
all_test_procs.append(test_process([24, -24],[36, 35],mssm))
all_test_procs.append(test_process([24, -24],[37, -37],mssm))
all_test_procs.append(test_process([24, -24],[1000002, -1000002],mssm))
all_test_procs.append(test_process([24, -24],[2000002, -2000002],mssm))
all_test_procs.append(test_process([24, -24],[2000004, -2000004],mssm))
all_test_procs.append(test_process([24, -24],[1000004, -1000004],mssm))
all_test_procs.append(test_process([24, -24],[1000006, -1000006],mssm))
all_test_procs.append(test_process([24, -24],[2000006, -2000006],mssm))
all_test_procs.append(test_process([24, -24],[1000006, -2000006],mssm))
all_test_procs.append(test_process([24, -24],[1000022, 1000022],mssm))
all_test_procs.append(test_process([24, -24],[1000022, 1000023],mssm))
all_test_procs.append(test_process([24, -24],[1000022, 1000025],mssm))
all_test_procs.append(test_process([24, -24],[1000022, 1000035],mssm))
all_test_procs.append(test_process([24, -24],[1000023, 1000023],mssm))
all_test_procs.append(test_process([24, -24],[1000023, 1000025],mssm))
all_test_procs.append(test_process([24, -24],[1000023, 1000035],mssm))
all_test_procs.append(test_process([24, -24],[1000035, 1000035],mssm))
all_test_procs.append(test_process([24, -24],[1000025, 1000025],mssm))
all_test_procs.append(test_process([24, -24],[1000025, 1000035],mssm))
all_test_procs.append(test_process([24, -24],[1000037, -1000037],mssm))
all_test_procs.append(test_process([24, -24],[1000024, -1000037],mssm))
all_test_procs.append(test_process([24, -24],[12, 1000022, 1000022, -12],mssm))
all_test_procs.append(test_process([24, -24],[12, 1000024, -1000024, -12],mssm))
all_test_procs.append(test_process([24, -24],[12, 1000024, -1000037, -12],mssm))
all_test_procs.append(test_process([24, -24],[25, 25, 12, -12],mssm))
all_test_procs.append(test_process([24, -24],[1000011, -1000011, 23, 23],mssm))
all_test_procs.append(test_process([24, -24],[1000001, -1000001],mssm))
all_test_procs.append(test_process([24, -24],[2000001, -2000001],mssm))
all_test_procs.append(test_process([24, -24],[1000003, -1000003],mssm))
all_test_procs.append(test_process([24, -24],[2000003, -2000003],mssm))
all_test_procs.append(test_process([24, -24],[1000005, -1000005],mssm))
all_test_procs.append(test_process([24, -24],[2000005, -2000005],mssm))
all_test_procs.append(test_process([24, -24],[1000005, -2000005],mssm))
all_test_procs.append(test_process([24, -24],[1000024, -1000024],mssm))
all_test_procs.append(test_process([24, -24],[25, 25],mssm))
all_test_procs.append(test_process([24, -24],[25, 35],mssm))
all_test_procs.append(test_process([24, -24],[35, 35],mssm))
all_test_procs.append(test_process([24, -24],[36, 36],mssm))
all_test_procs.append(test_process([23, 23],[1000011, -1000011],mssm))
all_test_procs.append(test_process([23, 23],[2000011, -2000011],mssm))
all_test_procs.append(test_process([23, 23],[1000013, -1000013],mssm))
all_test_procs.append(test_process([23, 23],[2000013, -2000013],mssm))
all_test_procs.append(test_process([23, 23],[1000015, -1000015],mssm))
all_test_procs.append(test_process([23, 23],[2000015, -2000015],mssm))
all_test_procs.append(test_process([23, 23],[1000015, -2000015],mssm))
all_test_procs.append(test_process([23, 23],[1000012, -1000012],mssm))
all_test_procs.append(test_process([23, 23],[1000014, -1000014],mssm))
all_test_procs.append(test_process([23, 23],[1000016, -1000016],mssm))
all_test_procs.append(test_process([23, 23],[1000002, -1000002],mssm))
all_test_procs.append(test_process([23, 23],[2000002, -2000002],mssm))
all_test_procs.append(test_process([23, 23],[2000004, -2000004],mssm))
all_test_procs.append(test_process([23, 23],[1000004, -1000004],mssm))
all_test_procs.append(test_process([23, 23],[1000006, -1000006],mssm))
all_test_procs.append(test_process([23, 23],[2000006, -2000006],mssm))
all_test_procs.append(test_process([23, 23],[1000006, -2000006],mssm))
all_test_procs.append(test_process([23, 23],[37, -37],mssm))
all_test_procs.append(test_process([23, 23],[25, 25],mssm))
all_test_procs.append(test_process([23, 23],[25, 35],mssm))
all_test_procs.append(test_process([23, 23],[35, 35],mssm))
all_test_procs.append(test_process([23, 23],[36, 36],mssm))
all_test_procs.append(test_process([23, 23],[1000001, -1000001],mssm))
all_test_procs.append(test_process([23, 23],[2000001, -2000001],mssm))
all_test_procs.append(test_process([23, 23],[1000003, -1000003],mssm))
all_test_procs.append(test_process([23, 23],[2000003, -2000003],mssm))
all_test_procs.append(test_process([23, 23],[1000005, -1000005],mssm))
all_test_procs.append(test_process([23, 23],[2000005, -2000005],mssm))
all_test_procs.append(test_process([23, 23],[1000005, -2000005],mssm))
all_test_procs.append(test_process([11, -11],[1000011, -1000011],mssm))
all_test_procs.append(test_process([11, -11],[2000011, -2000011],mssm))
all_test_procs.append(test_process([11, -11],[1000011, -2000011],mssm))
all_test_procs.append(test_process([11, -11],[1000013, -1000013],mssm))
all_test_procs.append(test_process([11, -11],[2000013, -2000013],mssm))
all_test_procs.append(test_process([11, -11],[1000015, -1000015],mssm))
all_test_procs.append(test_process([11, -11],[2000015, -2000015],mssm))
all_test_procs.append(test_process([11, -11],[1000015, -2000015],mssm))
all_test_procs.append(test_process([11, -11],[1000012, -1000012],mssm))
all_test_procs.append(test_process([11, -11],[1000014, -1000014],mssm))
all_test_procs.append(test_process([11, -11],[1000016, -1000016],mssm))
all_test_procs.append(test_process([11, -11],[23, 25],mssm))
all_test_procs.append(test_process([11, -11],[23, 35],mssm))
all_test_procs.append(test_process([11, -11],[36, 25],mssm))
all_test_procs.append(test_process([11, -11],[36, 35],mssm))
all_test_procs.append(test_process([11, -11],[37, -37],mssm))
all_test_procs.append(test_process([11, -11],[1000002, -1000002],mssm))
all_test_procs.append(test_process([11, -11],[2000002, -2000002],mssm))
all_test_procs.append(test_process([11, -11],[2000004, -2000004],mssm))
all_test_procs.append(test_process([11, -11],[1000004, -1000004],mssm))
all_test_procs.append(test_process([11, -11],[1000006, -1000006],mssm))
all_test_procs.append(test_process([11, -11],[2000006, -2000006],mssm))
all_test_procs.append(test_process([11, -11],[1000006, -2000006],mssm))
all_test_procs.append(test_process([11, -11],[1000022, 1000022],mssm))
all_test_procs.append(test_process([11, -11],[1000022, 1000023],mssm))
all_test_procs.append(test_process([11, -11],[1000022, 1000025],mssm))
all_test_procs.append(test_process([11, -11],[1000022, 1000035],mssm))
all_test_procs.append(test_process([11, -11],[1000023, 1000023],mssm))
all_test_procs.append(test_process([11, -11],[1000023, 1000025],mssm))
all_test_procs.append(test_process([11, -11],[1000023, 1000035],mssm))
all_test_procs.append(test_process([11, -11],[1000035, 1000035],mssm))
all_test_procs.append(test_process([11, -11],[1000025, 1000025],mssm))
all_test_procs.append(test_process([11, -11],[1000025, 1000035],mssm))
all_test_procs.append(test_process([11, -11],[1000024, -1000024],mssm))
all_test_procs.append(test_process([11, -11],[1000037, -1000037],mssm))
all_test_procs.append(test_process([11, -11],[1000024, -1000037],mssm))
all_test_procs.append(test_process([11, -11],[1000001, -1000001],mssm))
all_test_procs.append(test_process([11, -11],[2000001, -2000001],mssm))
all_test_procs.append(test_process([11, -11],[1000003, -1000003],mssm))
all_test_procs.append(test_process([11, -11],[2000003, -2000003],mssm))
all_test_procs.append(test_process([11, -11],[1000005, -1000005],mssm))
all_test_procs.append(test_process([11, -11],[2000005, -2000005],mssm))
all_test_procs.append(test_process([11, -11],[1000005, -2000005],mssm))
all_test_procs.append(test_process([2, 2],[1000002, 1000002],mssm))
all_test_procs.append(test_process([2, 2],[2000002, 2000002],mssm))
all_test_procs.append(test_process([2, 2],[1000002, 2000002],mssm))
all_test_procs.append(test_process([15, -15],[1000016, -1000016],mssm))
all_test_procs.append(test_process([15, -15],[1000015, -1000015],mssm))
all_test_procs.append(test_process([15, -15],[2000015, -2000015],mssm))
all_test_procs.append(test_process([15, -15],[1000015, -2000015],mssm))
all_test_procs.append(test_process([15, -15],[1000022, 1000023],mssm))
all_test_procs.append(test_process([15, -15],[1000022, 1000025],mssm))
all_test_procs.append(test_process([15, -15],[1000022, 1000035],mssm))
all_test_procs.append(test_process([15, -15],[1000023, 1000023],mssm))
all_test_procs.append(test_process([15, -15],[1000023, 1000025],mssm))
all_test_procs.append(test_process([15, -15],[1000023, 1000035],mssm))
all_test_procs.append(test_process([15, -15],[1000025, 1000025],mssm))
all_test_procs.append(test_process([15, -15],[1000025, 1000035],mssm))
all_test_procs.append(test_process([15, -15],[1000035, 1000035],mssm))
all_test_procs.append(test_process([15, -15],[1000024, -1000024],mssm))
all_test_procs.append(test_process([15, -15],[1000037, -1000037],mssm))
all_test_procs.append(test_process([15, -15],[1000024, -1000037],mssm))
all_test_procs.append(test_process([15, -15],[25, 25],mssm))
all_test_procs.append(test_process([15, -15],[25, 35],mssm))
all_test_procs.append(test_process([15, -15],[35, 35],mssm))
all_test_procs.append(test_process([15, -15],[36, 36],mssm))
all_test_procs.append(test_process([15, -15],[23, 25],mssm))
all_test_procs.append(test_process([15, -15],[23, 35],mssm))
all_test_procs.append(test_process([15, -15],[23, 36],mssm))
all_test_procs.append(test_process([15, -15],[36, 25],mssm))
all_test_procs.append(test_process([15, -15],[36, 35],mssm))
all_test_procs.append(test_process([15, -15],[37, -37],mssm))
all_test_procs.append(test_process([15, -15],[1000022, 1000022],mssm))
all_test_procs.append(test_process([15, -16],[1000015, -1000016],mssm))
all_test_procs.append(test_process([15, -16],[2000015, -1000016],mssm))
all_test_procs.append(test_process([15, -16],[-1000024, 1000022],mssm))
all_test_procs.append(test_process([15, -16],[-1000024, 1000023],mssm))
all_test_procs.append(test_process([15, -16],[-1000024, 1000025],mssm))
all_test_procs.append(test_process([15, -16],[-1000024, 1000035],mssm))
all_test_procs.append(test_process([15, -16],[-1000037, 1000022],mssm))
all_test_procs.append(test_process([15, -16],[-1000037, 1000023],mssm))
all_test_procs.append(test_process([15, -16],[-1000037, 1000025],mssm))
all_test_procs.append(test_process([15, -16],[-1000037, 1000035],mssm))
all_test_procs.append(test_process([15, -16],[-37, 25],mssm))
all_test_procs.append(test_process([15, -16],[-37, 35],mssm))
all_test_procs.append(test_process([15, -16],[-37, 36],mssm))
all_test_procs.append(test_process([15, -16],[-24, 25],mssm))
all_test_procs.append(test_process([15, -16],[-24, 35],mssm))
all_test_procs.append(test_process([15, -16],[-24, 36],mssm))
all_test_procs.append(test_process([15, -16],[23, -37],mssm))
all_test_procs.append(test_process([1, 1],[1000001, 1000001],mssm))
all_test_procs.append(test_process([1, 1],[2000001, 2000001],mssm))
all_test_procs.append(test_process([1, 1],[1000001, 2000001],mssm))
all_test_procs.append(test_process([21, 21],[1000021, 1000021],mssm))
all_test_procs.append(test_process([21, 21],[1000002, -1000002],mssm))
all_test_procs.append(test_process([21, 21],[2000002, -2000002],mssm))
all_test_procs.append(test_process([21, 21],[1000004, -1000004],mssm))
all_test_procs.append(test_process([21, 21],[2000004, -2000004],mssm))
all_test_procs.append(test_process([21, 21],[1000006, -1000006],mssm, 1.0e-8))
all_test_procs.append(test_process([21, 21],[2000006, -2000006],mssm, 1.0e-8))
all_test_procs.append(test_process([21, 21],[1000001, -1000001],mssm))
all_test_procs.append(test_process([21, 21],[2000001, -2000001],mssm))
all_test_procs.append(test_process([21, 21],[1000003, -1000003],mssm))
all_test_procs.append(test_process([21, 21],[2000003, -2000003],mssm))
all_test_procs.append(test_process([21, 21],[1000005, -1000005],mssm, 1.0e-8))
all_test_procs.append(test_process([21, 21],[2000005, -2000005],mssm, 1.0e-8))
all_test_procs.append(test_process([22, 22],[1000011, -1000011],mssm))
all_test_procs.append(test_process([22, 22],[2000011, -2000011],mssm))
all_test_procs.append(test_process([22, 22],[1000013, -1000013],mssm))
all_test_procs.append(test_process([22, 22],[2000013, -2000013],mssm))
all_test_procs.append(test_process([22, 22],[1000015, -1000015],mssm))
all_test_procs.append(test_process([22, 22],[2000015, -2000015],mssm))
all_test_procs.append(test_process([22, 22],[1000002, -1000002],mssm))
all_test_procs.append(test_process([22, 22],[2000002, -2000002],mssm))
all_test_procs.append(test_process([22, 22],[2000004, -2000004],mssm))
all_test_procs.append(test_process([22, 22],[1000004, -1000004],mssm))
all_test_procs.append(test_process([22, 22],[1000006, -1000006],mssm, 1.0e-8))
all_test_procs.append(test_process([22, 22],[2000006, -2000006],mssm, 1.0e-8))
all_test_procs.append(test_process([22, 22],[1000001, -1000001],mssm))
all_test_procs.append(test_process([22, 22],[2000001, -2000001],mssm))
all_test_procs.append(test_process([22, 22],[1000003, -1000003],mssm))
all_test_procs.append(test_process([22, 22],[2000003, -2000003],mssm))
all_test_procs.append(test_process([22, 22],[1000005, -1000005],mssm, 1.0e-8))
all_test_procs.append(test_process([22, 22],[2000005, -2000005],mssm, 1.0e-8))
all_test_procs.append(test_process([22, 22],[1000024, -1000024],mssm))
all_test_procs.append(test_process([22, 22],[1000037, -1000037],mssm))
all_test_procs.append(test_process([22, 22],[37, -37],mssm))
all_test_procs.append(test_process([23, 22],[1000011, -1000011],mssm))
all_test_procs.append(test_process([23, 22],[2000011, -2000011],mssm))
all_test_procs.append(test_process([23, 22],[1000013, -1000013],mssm))
all_test_procs.append(test_process([23, 22],[2000013, -2000013],mssm))
all_test_procs.append(test_process([23, 22],[1000015, -1000015],mssm, 1.0e-8))
all_test_procs.append(test_process([23, 22],[2000015, -2000015],mssm, 1.0e-8))
all_test_procs.append(test_process([23, 22],[1000015, -2000015],mssm, 1.0e-7))
all_test_procs.append(test_process([23, 22],[1000002, -1000002],mssm))
all_test_procs.append(test_process([23, 22],[2000002, -2000002],mssm))
all_test_procs.append(test_process([23, 22],[2000004, -2000004],mssm))
all_test_procs.append(test_process([23, 22],[1000004, -1000004],mssm))
all_test_procs.append(test_process([23, 22],[1000006, -1000006],mssm, 1.0e-8))
all_test_procs.append(test_process([23, 22],[2000006, -2000006],mssm, 1.0e-8))
all_test_procs.append(test_process([23, 22],[1000006, -2000006],mssm, 1.0e-7))
all_test_procs.append(test_process([23, 22],[1000001, -1000001],mssm))
all_test_procs.append(test_process([23, 22],[2000001, -2000001],mssm))
all_test_procs.append(test_process([23, 22],[1000003, -1000003],mssm))
all_test_procs.append(test_process([23, 22],[2000003, -2000003],mssm))
all_test_procs.append(test_process([23, 22],[1000005, -1000005],mssm, 1.0e-8))
all_test_procs.append(test_process([23, 22],[2000005, -2000005],mssm, 1.0e-8))
all_test_procs.append(test_process([23, 22],[1000005, -2000005],mssm, 1.0e-7))
all_test_procs.append(test_process([23, 22],[37, -37],mssm))
all_test_procs.append(test_process([5, -5],[1000005, -1000005],mssm))
all_test_procs.append(test_process([5, -5],[2000005, -2000005],mssm))
all_test_procs.append(test_process([5, -5],[1000005, -2000005],mssm))
all_test_procs.append(test_process([5, -5],[1000006, -1000006],mssm, 1.0e-8))
all_test_procs.append(test_process([5, -5],[2000006, -2000006],mssm, 1.0e-8))
all_test_procs.append(test_process([5, -5],[1000006, -2000006],mssm))
all_test_procs.append(test_process([5, -5],[1000022, 1000022],mssm))
all_test_procs.append(test_process([5, -5],[1000022, 1000023],mssm))
all_test_procs.append(test_process([5, -5],[1000022, 1000025],mssm))
all_test_procs.append(test_process([5, -5],[1000022, 1000035],mssm))
all_test_procs.append(test_process([5, -5],[1000023, 1000023],mssm))
all_test_procs.append(test_process([5, -5],[1000023, 1000025],mssm))
all_test_procs.append(test_process([5, -5],[1000023, 1000035],mssm))
all_test_procs.append(test_process([5, -5],[1000035, 1000035],mssm))
all_test_procs.append(test_process([5, -5],[1000025, 1000025],mssm))
all_test_procs.append(test_process([5, -5],[1000025, 1000035],mssm))
all_test_procs.append(test_process([5, -5],[1000024, -1000024],mssm))
all_test_procs.append(test_process([5, -5],[1000037, -1000037],mssm))
all_test_procs.append(test_process([5, -5],[1000024, -1000037],mssm))
all_test_procs.append(test_process([5, -5],[25, 25],mssm))
all_test_procs.append(test_process([5, -5],[25, 35],mssm))
all_test_procs.append(test_process([5, -5],[35, 35],mssm))
all_test_procs.append(test_process([5, -5],[36, 36],mssm))
all_test_procs.append(test_process([5, -5],[36, 25],mssm))
all_test_procs.append(test_process([5, -5],[36, 35],mssm))
all_test_procs.append(test_process([5, -5],[23, 25],mssm))
all_test_procs.append(test_process([5, -5],[23, 35],mssm))
all_test_procs.append(test_process([5, -5],[23, 36],mssm))
all_test_procs.append(test_process([5, -5],[37, -37],mssm))
all_test_procs.append(test_process([2, -2],[1000021, 1000021],mssm))
all_test_procs.append(test_process([2, -2],[1000011, -1000011],mssm))
all_test_procs.append(test_process([2, -2],[2000011, -2000011],mssm))
all_test_procs.append(test_process([2, -2],[1000013, -1000013],mssm))
all_test_procs.append(test_process([2, -2],[2000013, -2000013],mssm))
all_test_procs.append(test_process([2, -2],[1000015, -1000015],mssm))
all_test_procs.append(test_process([2, -2],[2000015, -2000015],mssm))
all_test_procs.append(test_process([2, -2],[1000015, -2000015],mssm))
all_test_procs.append(test_process([2, -2],[1000012, -1000012],mssm))
all_test_procs.append(test_process([2, -2],[1000014, -1000014],mssm))
all_test_procs.append(test_process([2, -2],[1000016, -1000016],mssm))
all_test_procs.append(test_process([2, -2],[23, 25],mssm))
all_test_procs.append(test_process([2, -2],[23, 35],mssm))
all_test_procs.append(test_process([2, -2],[1000002, -1000002],mssm))
all_test_procs.append(test_process([2, -2],[2000002, -2000002],mssm))
all_test_procs.append(test_process([2, -2],[2000004, -2000004],mssm))
all_test_procs.append(test_process([2, -2],[1000004, -1000004],mssm))
all_test_procs.append(test_process([2, -2],[1000006, -1000006],mssm))
all_test_procs.append(test_process([2, -2],[2000006, -2000006],mssm))
all_test_procs.append(test_process([2, -2],[1000006, -2000006],mssm))
all_test_procs.append(test_process([2, -2],[1000022, 1000022],mssm))
all_test_procs.append(test_process([2, -2],[1000022, 1000023],mssm))
all_test_procs.append(test_process([2, -2],[1000022, 1000025],mssm))
all_test_procs.append(test_process([2, -2],[1000022, 1000035],mssm))
all_test_procs.append(test_process([2, -2],[1000023, 1000023],mssm))
all_test_procs.append(test_process([2, -2],[1000023, 1000025],mssm))
all_test_procs.append(test_process([2, -2],[1000023, 1000035],mssm))
all_test_procs.append(test_process([2, -2],[1000035, 1000035],mssm))
all_test_procs.append(test_process([2, -2],[1000025, 1000025],mssm))
all_test_procs.append(test_process([2, -2],[1000025, 1000035],mssm))
all_test_procs.append(test_process([2, -2],[1000024, -1000024],mssm))
all_test_procs.append(test_process([2, -2],[1000037, -1000037],mssm))
all_test_procs.append(test_process([2, -2],[1000024, -1000037],mssm))
all_test_procs.append(test_process([2, -2],[1000001, -1000001],mssm))
all_test_procs.append(test_process([2, -2],[2000001, -2000001],mssm))
all_test_procs.append(test_process([2, -2],[1000003, -1000003],mssm))
all_test_procs.append(test_process([2, -2],[2000003, -2000003],mssm))
all_test_procs.append(test_process([2, -2],[1000005, -1000005],mssm))
all_test_procs.append(test_process([2, -2],[2000005, -2000005],mssm))
all_test_procs.append(test_process([2, -2],[1000005, -2000005],mssm))
all_test_procs.append(test_process([25, 25],[1000024, -1000037],mssm))
all_test_procs.append(test_process([1, -1],[1000021, 1000021],mssm))
all_test_procs.append(test_process([1, -1],[1000011, -1000011],mssm))
all_test_procs.append(test_process([1, -1],[2000011, -2000011],mssm))
all_test_procs.append(test_process([1, -1],[1000013, -1000013],mssm))
all_test_procs.append(test_process([1, -1],[2000013, -2000013],mssm))
all_test_procs.append(test_process([1, -1],[1000015, -1000015],mssm))
all_test_procs.append(test_process([1, -1],[2000015, -2000015],mssm))
all_test_procs.append(test_process([1, -1],[1000015, -2000015],mssm))
all_test_procs.append(test_process([1, -1],[1000012, -1000012],mssm))
all_test_procs.append(test_process([1, -1],[1000014, -1000014],mssm))
all_test_procs.append(test_process([1, -1],[1000016, -1000016],mssm))
all_test_procs.append(test_process([1, -1],[23, 25],mssm))
all_test_procs.append(test_process([1, -1],[23, 35],mssm))
all_test_procs.append(test_process([1, -1],[1000002, -1000002],mssm))
all_test_procs.append(test_process([1, -1],[2000002, -2000002],mssm))
all_test_procs.append(test_process([1, -1],[2000004, -2000004],mssm))
all_test_procs.append(test_process([1, -1],[1000004, -1000004],mssm))
all_test_procs.append(test_process([1, -1],[1000006, -1000006],mssm))
all_test_procs.append(test_process([1, -1],[2000006, -2000006],mssm))
all_test_procs.append(test_process([1, -1],[1000006, -2000006],mssm))
all_test_procs.append(test_process([1, -1],[1000022, 1000022],mssm))
all_test_procs.append(test_process([1, -1],[1000022, 1000023],mssm))
all_test_procs.append(test_process([1, -1],[1000022, 1000025],mssm))
all_test_procs.append(test_process([1, -1],[1000022, 1000035],mssm))
all_test_procs.append(test_process([1, -1],[1000023, 1000023],mssm))
all_test_procs.append(test_process([1, -1],[1000023, 1000025],mssm))
all_test_procs.append(test_process([1, -1],[1000023, 1000035],mssm))
all_test_procs.append(test_process([1, -1],[1000035, 1000035],mssm))
all_test_procs.append(test_process([1, -1],[1000025, 1000025],mssm))
all_test_procs.append(test_process([1, -1],[1000025, 1000035],mssm))
all_test_procs.append(test_process([1, -1],[1000024, -1000024],mssm))
all_test_procs.append(test_process([1, -1],[1000037, -1000037],mssm))
all_test_procs.append(test_process([1, -1],[1000024, -1000037],mssm))
all_test_procs.append(test_process([1, -1],[1000001, -1000001],mssm))
all_test_procs.append(test_process([1, -1],[2000001, -2000001],mssm))
all_test_procs.append(test_process([1, -1],[1000003, -1000003],mssm))
all_test_procs.append(test_process([1, -1],[2000003, -2000003],mssm))
all_test_procs.append(test_process([1, -1],[1000005, -1000005],mssm))
all_test_procs.append(test_process([1, -1],[2000005, -2000005],mssm))
all_test_procs.append(test_process([1, -1],[1000005, -2000005],mssm))
all_test_procs.append(test_process([5, -6],[1000005, -1000006],mssm))
all_test_procs.append(test_process([5, -6],[1000005, -2000006],mssm))
all_test_procs.append(test_process([5, -6],[2000005, -1000006],mssm))
all_test_procs.append(test_process([5, -6],[2000005, -2000006],mssm))
all_test_procs.append(test_process([5, -6],[-1000024, 1000022],mssm))
all_test_procs.append(test_process([5, -6],[-1000024, 1000023],mssm))
all_test_procs.append(test_process([5, -6],[-1000024, 1000025],mssm))
all_test_procs.append(test_process([5, -6],[-1000024, 1000035],mssm))
all_test_procs.append(test_process([5, -6],[-1000037, 1000022],mssm))
all_test_procs.append(test_process([5, -6],[-1000037, 1000023],mssm))
all_test_procs.append(test_process([5, -6],[-1000037, 1000025],mssm))
all_test_procs.append(test_process([5, -6],[-1000037, 1000035],mssm))
all_test_procs.append(test_process([5, -6],[-37, 25],mssm))
all_test_procs.append(test_process([5, -6],[-37, 35],mssm))
all_test_procs.append(test_process([5, -6],[-37, 36],mssm))
all_test_procs.append(test_process([5, -6],[23, -37],mssm))
all_test_procs.append(test_process([2, 21],[1000002, 1000021],mssm))
all_test_procs.append(test_process([2, 21],[2000002, 1000021],mssm))
all_test_procs.append(test_process([-24, 22],[1000011, -1000012],mssm))
all_test_procs.append(test_process([-24, 22],[1000013, -1000014],mssm))
all_test_procs.append(test_process([-24, 22],[1000015, -1000016],mssm, 1.0e-6))
all_test_procs.append(test_process([-24, 22],[2000015, -1000016],mssm, 1.0e-6))
all_test_procs.append(test_process([-24, 22],[1000001, -1000002],mssm))
all_test_procs.append(test_process([-24, 22],[1000003, -1000004],mssm))
all_test_procs.append(test_process([-24, 22],[1000005, -1000006],mssm, 1.0e-5))
all_test_procs.append(test_process([-24, 22],[2000005, -2000006],mssm, 1.0e-5))
all_test_procs.append(test_process([-24, 22],[1000005, -2000006],mssm, 1.0e-6))
all_test_procs.append(test_process([-24, 22],[2000005, -1000006],mssm, 1.0e-4))
all_test_procs.append(test_process([-24, 22],[1000022, -1000024],mssm, 1.0e-7))
all_test_procs.append(test_process([-24, 22],[1000023, -1000024],mssm, 1.0e-7))
all_test_procs.append(test_process([-24, 22],[1000025, -1000024],mssm, 1.0e-7))
all_test_procs.append(test_process([-24, 22],[1000035, -1000024],mssm, 1.0e-7))
all_test_procs.append(test_process([-24, 22],[1000022, -1000037],mssm, 1.0e-7))
all_test_procs.append(test_process([-24, 22],[1000023, -1000037],mssm, 1.0e-7))
all_test_procs.append(test_process([-24, 22],[1000025, -1000037],mssm, 1.0e-6))
all_test_procs.append(test_process([-24, 22],[1000035, -1000037],mssm, 1.0e-7))
all_test_procs.append(test_process([-24, 22],[25, -37],mssm))
all_test_procs.append(test_process([-24, 22],[35, -37],mssm))
all_test_procs.append(test_process([-24, 22],[36, -37],mssm))
all_test_procs.append(test_process([-24, 22],[-24, 25],mssm, 1.0e-8))
all_test_procs.append(test_process([-24, 22],[-24, 35],mssm, 1.0e-8))
all_test_procs.append(test_process([21, 22],[1000002, -1000002],mssm))
all_test_procs.append(test_process([21, 22],[2000002, -2000002],mssm))
all_test_procs.append(test_process([21, 22],[2000004, -2000004],mssm))
all_test_procs.append(test_process([21, 22],[1000004, -1000004],mssm))
all_test_procs.append(test_process([21, 22],[1000006, -1000006],mssm, 1.0e-8))
all_test_procs.append(test_process([21, 22],[2000006, -2000006],mssm, 1.0e-8))
all_test_procs.append(test_process([21, 22],[1000001, -1000001],mssm))
all_test_procs.append(test_process([21, 22],[2000001, -2000001],mssm))
all_test_procs.append(test_process([21, 22],[1000003, -1000003],mssm))
all_test_procs.append(test_process([21, 22],[2000003, -2000003],mssm))
all_test_procs.append(test_process([21, 22],[1000005, -1000005],mssm, 1.0e-8))
all_test_procs.append(test_process([21, 22],[2000005, -2000005],mssm, 1.0e-8))
all_test_procs.append(test_process([21, -24],[1000001, -1000002],mssm))
all_test_procs.append(test_process([21, -24],[1000003, -1000004],mssm))
all_test_procs.append(test_process([21, -24],[1000005, -1000006],mssm, 5.0e-8))
all_test_procs.append(test_process([21, -24],[2000005, -2000006],mssm, 5.0e-8))
all_test_procs.append(test_process([21, -24],[1000005, -2000006],mssm, 5.0e-8))
all_test_procs.append(test_process([21, -24],[2000005, -1000006],mssm, 5.0e-8))

all_test_procs.append(test_process([23, 24],[23, 24, 23, 23],qagc, 1.0e-12))
all_test_procs.append(test_process([25, 25],[24, -24],qagc, 5.0e-12))
all_test_procs.append(test_process([25, 25],[24, -24, 22, 22],qagc, 1.0e-12))
all_test_procs.append(test_process([21, 21],[21, 21],qagc, 1.0e-12))
all_test_procs.append(test_process([22, 22],[24, -24],qagc, 5.0e-11))
all_test_procs.append(test_process([22, 22],[24, -24, 22, 22],qagc, 1.0e-12))
all_test_procs.append(test_process([23, 23],[24, -24, 25, 25],qagc, 1.0e-12))
all_test_procs.append(test_process([23, 23],[25, 25],qagc, 1.0e-12))
all_test_procs.append(test_process([23, 23],[25, 25, 25, 25],qagc, 1.0e-12))
all_test_procs.append(test_process([23, 23],[24, -24, 22, 22],qagc, 1.0e-12))
all_test_procs.append(test_process([23, 23],[22, 22, 23, 23],qagc, 1.0e-12))
all_test_procs.append(test_process([23, 23],[22, 23, 23, 23],qagc, 1.0e-12))
all_test_procs.append(test_process([24, -24],[24, -24],qagc, 1.0e-11))
all_test_procs.append(test_process([24, -24],[24, -24, 24, -24],qagc, 1.0e-12))
all_test_procs.append(test_process([24, -24],[24, -24, 22, 22],qagc, 1.0e-12))
all_test_procs.append(test_process([24, -24],[22, 22, 22, 22],qagc, 1.0e-12))
