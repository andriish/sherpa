#!/usr/bin/python

import os
import getpass
import time

import BeamBox
import PDFBox
import ProcessBox
import ShowerBox
import SoftBox
import SelectorBox


class ParameterBox():
    def __init__(self):
        print "Initialising ParameterBox."
        self.beambox = BeamBox.BeamBox()
        self.pdfbox  = PDFBox.PDFBox()
        self.procbox = ProcessBox.ProcessBox()
        self.showbox = ShowerBox.ShowerBox()
        self.softbox = SoftBox.SoftBox()
        self.selbox  = SelectorBox.SelectorBox()
        self.initialiseDefaults()
        self.NEvents = 0
        self.EvtMode = "Weighted"


    def initialiseDefaults(self):
        print "Initialise defaults in the ParameterBox."
        self.NEvents = 10000
        self.beambox.initialiseDefaults()
        self.pdfbox.initialiseDefaults(self.beambox.getCollider())
        self.procbox.initialiseDefaults(self.beambox.getCollider())
        self.softbox.initialiseDefaults(self.beambox.getCollider())
        self.selbox.initialiseDefaults(self.beambox.getCollider(),None)

    def printStatus(self):
        self.beambox.printStatus()
        self.pdfbox.printStatuss()

    def updateBeams(self,collider_tag):
        print "In updateBeams(",collider_tag,")"
        self.beambox.setCollider(collider_tag)
        self.pdfbox.initialiseDefaults(self.beambox.getCollider())
        self.procbox.initialiseDefaults(self.beambox.getCollider())
        self.softbox.initialiseDefaults(self.beambox.getCollider())

    def getBeamBox(self):
        return self.beambox

    def getPDFBox(self):
        return self.pdfbox

    def getProcBox(self):
        return self.procbox

    def getShowerBox(self):
        return self.showbox

    def getSoftBox(self):
        return self.softbox

    def getSelectorBox(self):
        return self.selbox

    def setNEvents(self,N):
        self.NEvents = N

    def getNEvents(self):
        return self.NEvents

    def setEvtMode(self,mode):
        self.EvtMode = mode

    def getEvtMode(self,mode):
        return self.EvtMode



    def write(self,genstring):
        filename   = "Run.dat"
        runfile = open(filename,"w")
        self.write_general(runfile)
        self.procbox.write(runfile)
        self.selbox.write(runfile)

    def write_general(self,runfile):
        username   = getpass.getuser()
        timestring = time.strftime("%a, %d %b %Y %H:%M:%S +0000",time.gmtime()) 
        runfile.write("%%% Card generated by "+username+", "+timestring+"\n\n")
        runfile.write("(run){\n\n")
        runfile.write("  EVENTS                = "+str(self.NEvents)+"\n")
        runfile.write("  EVENT_GENERATION_MODE = "+self.EvtMode+"\n\n")
        runfile.write("  %%% Generic model settings\n\n")
        for line in self.procbox.getProcess().getModelLines():
            runfile.write("  "+line+"\n")
        runfile.write("\n")

        runfile.write("  %%% Generic ME settings\n\n")
        minjets,totjets, nlojets = self.procbox.getNJets()
        runfile.write("  NJETS:={}; ".format(totjets))
        if nlojets>-1:
            nlojetsstr=""
            for jetno in range (minjets,nlojets):
                nlojetsstr=nlojetsstr+str(jetno)+","
            nlojetsstr=nlojetsstr+str(nlojets)
            runfile.write("NLOJETS:={"+nlojetsstr+"};")
        runfile.write("\n")
        muF2,muR2,muQ2   = self.procbox.getScaleFactors() 
        qcut             = self.procbox.getCKKWScale()
        spnloct          = ""
        if (nlojets>-1 and (muF2!=1. or muR2!=1.)):
            spnloct      = "SP_NLOCT=1; "
        runfile.write("  "+spnloct)
        runfile.write("SF2:=%.2f; SR2:=%.2f; SQ2:=%.2f;" %(muF2,muR2,muQ2))
        if totjets>minjets:
            runfile.write("QCUT:=%.2f;" %(qcut))
        runfile.write("\n")              
        runfile.write("  SCALES METS{SCF2*MU_F2}{SCR2*MU_R2}{SCQ2*MU_Q2}\n\n")
        runfile.write("\n")
        loopstring = ""
        if nlojets>-1:
            gens = self.procbox.getLoopGens()
            if gens!=None and len(gens)>-1:
                for n in range(0,len(gens)):
                    if gens[n]!="None":
                        loopstring=loopstring+str("LOOPGEN%s " %str(n))
                        print ("LOOPGEN%s:=%s" %(str(n),gens[n]))
                        runfile.write("  LOOPGEN%s:=%s\n" %(str(n),gens[n]))
        runfile.write("  ME_SIGNAL_GENERATORS  = "+self.procbox.getLOGen()+" ")
        runfile.write(loopstring+"\n\n")
        self.beambox.write(runfile)
        self.pdfbox.write(runfile,self.beambox.getCollider())
        self.softbox.write(runfile)
        runfile.write("\n")
        runfile.write("}(run)\n\n")




