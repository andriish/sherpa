This is Sherpa.info, produced by makeinfo version 4.8 from Sherpa.texi.


File: Sherpa.info,  Node: Top,  Next: Introduction,  Up: (dir)

Sherpa 1.2.0 Manual
*******************

* Menu:

* Introduction::     What is Sherpa

* Command line::     Command line options
* Input structure::  How to specify parameters for a Sherpa run.
* Parameters::       List of parameters

* Tips and Tricks::  Advanced usage tips
* Customization::    Extending Sherpa

* Authors::          Authors of Sherpa
* Copying::          Your rights and freedoms
* Index::            Index


File: Sherpa.info,  Node: Introduction,  Next: Command line,  Prev: Top,  Up: Top

1 Introduction
**************

Sherpa is a Monte Carlo event generator for the Simulation of
High-Energy Reactions of PArticles in lepton-lepton, lepton-photon,
photon-photon and hadron-hadron collisions.  This document provides
information, which helps users understand and apply SHERPA for their
physics studies. The various options and parameters specifying the
program are compiled, and their meaning is explained. This document
does not aim at giving a complete description of the physics content of
Sherpa.  To this end, the authors refer the reader to the original
publication, JHEP02(2009)007


File: Sherpa.info,  Node: Command line,  Next: Input structure,  Prev: Introduction,  Up: Top

2 Command line options
**********************

The available command line options for Sherpa.

`-f <file>'
     Read input from file `<file>'.

`-p <path>'
     Read input file from path `<path>'.

`-e <events>'
     Set number of events to generate `<events>'.

`-O <level>'
     Set output level `<level>'.

`-v, --version'
     Print versioning information.

`PARAMETER=VALUE'
     Set the value of a parameter, see *Note Parameters::.

`TAG:=VALUE'
     Set the value of a tag, see *Note Tags::.



File: Sherpa.info,  Node: Input structure,  Next: Parameters,  Prev: Command line,  Up: Top

3 Input structure
*****************

A Sherpa setup is steered by various parameters, associated with the
different components of event generation.

These have to be specified in a run-card which by default is named
"Run.dat" in the current working directory.  If you want to use a
different setup directory for your Sherpa run, you have to specify it
on the command line as `PATH=<dir>'. To read parameters from a run-card
with a different name, you may specify `RUNDATA=<file>'.

Sherpa's parameters are grouped according to the different aspects of
event generation, e.g. the beam parameters in the group `(beam)' and
the fragmentation parameters in the group `(fragmentation)'.  In the
run-card this looks like:

  (beam){
    BEAM_ENERGY_1 = 7000.
    ...
  }(beam)

Each of these groups is described in detail in another chapter of this
manual, see *Note Parameters::.

If such a section or file does not exist in the setup directory, a
Sherpa-wide fallback mechanism is employed, searching the file in
various locations in the following order (where $SHERPA_DAT_PATH is an
optionally set environment variable):
   * `$SHERPA_DAT_PATH/<PATH>/'

   * `$SHERPA_DAT_PATH/'

   * `$prefix/share/SHERPA-MC/<PATH>/'

   * `$prefix/share/SHERPA-MC/'


All parameters can be overwritten on the command line, i.e.
command-line input has the highest priority.  The syntax is

  <prefix>/bin/Sherpa  KEYWORD1=value1 KEYWORD2=value2 ...

To change, e.g., the default number of events, the corresponding
command line reads

  <prefix>/bin/Sherpa  EVENTS=10000

All over Sherpa, particles are defined by the particle code proposed by
the PDG. These codes and the particle properties will be listed during
each run with `OUTPUT=2' for the elementary particles and `OUTPUT=4'
for the hadrons.  In both cases, antiparticles are characterized by a
minus sign in front of their code, e.g. a mu- has code `13', while a
mu+ has `-13'.

There are a few extra features for an easier handling of the parameter
file(s), namely global tag replacement, see *Note Tags::, and algebra
interpretation, see *Note Interpreter::.

* Menu:

* Interpreter::      How to use the internal interpreter
* Tags::             How to use tags


File: Sherpa.info,  Node: Interpreter,  Next: Tags,  Up: Input structure

3.1 Interpreter
===============

Sherpa has a built-in interpreter for algebraic expressions, like
`cos(5/180*M_PI)'.  This interpreter is employed when reading integer
and floating point numbers from input files, such that certain
parameters can be written in a more convenient fashion.  For example it
is possible to specify the factorisation scale as `sqr(91.188)'.
There are predefined tags to alleviate the handling

`M_PI'
     Ludolph's Number to a precision of 12 digits.

`M_C'
     The speed of light in the vacuum.

`E_CMS'
     The total centre of mass energy of the collision.

The expression syntax is in general C-like, except for the extra
function `sqr', which gives the square of its argument. Operator
precedence is the same as in C.  The interpreter can handle functions
with an arbitrary list of parameters, such as `min' and `max'.
The interpreter can be employed to construct arbitrary variables from
four momenta, like e.g. in the context of a parton level selector, see
*Note Selectors::.  The corresponding functions are

`Mass(V)'
     The invariant mass of V in GeV.

`Abs2(V)'
     The invariant mass squared of V in GeV^2.

`PPerp(V)'
     The transverse momentum of V in GeV.

`PPerp2(V)'
     The transverse momentum squared of V in GeV^2.

`MPerp(V)'
     The transverse mass of V in GeV.

`MPerp2(V)'
     The transverse mass squared of V in GeV^2.

`Theta(V)'
     The polar angle of V in radians.

`Eta(V)'
     The pseudorapidity of V.

`Phi(V)'
     The azimuthal angle of V in radians.

`Comp(V,I)'
     The I'th component of the vector V.

`PPerpR(V1,V2)'
     The relative transverse momentum between V1 and V2 in GeV.

`ThetaR(V1,V2)'
     The relative angle between V1 and V2 in radians.

`DEta(V1,V2)'
     The rapidity difference between V1 and V2.

`DPhi(V1,V2)'
     The relative polar angle between V1 and V2 in radians.



File: Sherpa.info,  Node: Tags,  Prev: Interpreter,  Up: Input structure

3.2 Tags
========

Tag replacement in Sherpa is performed through the data reading
routines, which means that it can be performed for virtually all inputs.
Specifying a tag on the command line using the syntax `<Tag>:=<Value>'
will replace every occurrence of `<Tag>' in all files during read-in.
An example tag definition could read

  <prefix>/bin/Sherpa YCUT:=20

and then be used in the (me) and (selector) sections like

  (me){
    RESULT_DIRECTORY = Result_YCUT/
  }(me)
  (selector){
    JetFinder   sqr(YCUT/E_CMS) 1.
  }(selector)


File: Sherpa.info,  Node: Parameters,  Next: Tips and Tricks,  Prev: Input structure,  Up: Top

4 Parameters
************

A Sherpa setup is steered by various parameters, associated with the
different components of event generation. Tag replacements may be
performed in all inputs, see *Note Tags::.

* Menu:

* Run Parameters::    List of general parameters
* Beam Parameters::   List of beam parameters
* ISR Parameters::    List of initial state radiation parameters
* Model Parameters::  List of interaction model parameters
* Matrix Elements::   Matrix element related settings
* Processes::         Syntax of the process setup
* Selectors::         Syntax of parton level cuts
* Integration::       List of integration parameters
* Shower Parameters:: List of shower parameters
* MPI Parameters::    List of multiple parton interaction parameters


File: Sherpa.info,  Node: Run Parameters,  Next: Beam Parameters,  Up: Parameters

4.1 Run Parameters
==================

The following parameters describe general run information.

* Menu:

* EVENTS::            Number of events to generate.
* OUTPUT::            Output level.
* RANDOM_SEED::       Seed for random number generator.
* ANALYSIS::          Switch internal analysis on or off.
* ANALYSIS_OUTPUT::   Directory for generated analysis histogram files.
* TIMEOUT::           Run time limitation.
* SPIN_CORRELATIONS:: Switch spin correlations on/off.
* NUM_ACCURACY::      Accuracy for gauge tests.
* Event output formats:: Event output in different formats.

* SHERPA_CPP_PATH::   The C++ code generation path.
* SHERPA_LIB_PATH::   The runtime library path.


File: Sherpa.info,  Node: EVENTS,  Next: OUTPUT,  Up: Run Parameters

4.1.1 EVENTS
------------

This parameter specifies the number of events to be generated.


File: Sherpa.info,  Node: OUTPUT,  Next: RANDOM_SEED,  Prev: EVENTS,  Up: Run Parameters

4.1.2 OUTPUT
------------

This parameter specifies the output level (verbosity) of the program.
The value can be any sum of the following:
   * 0: Error messages (-> always displayed).

   * 1: Event display.

   * 2: Informational messages during the run.

   * 4: Tracking messages (lots of output).

   * 8: Debugging messages (even more output).

E.g. OUTPUT=3 would display information, events and errors.


File: Sherpa.info,  Node: RANDOM_SEED,  Next: ANALYSIS,  Prev: OUTPUT,  Up: Run Parameters

4.1.3 RANDOM_SEED
-----------------

SHERPA uses a random-number generator as described in [Florida State
University Report FSU-SCRI-87-50].  The two independent integer-valued
seeds are speciﬁed by the option "RANDOM SEED=A B". The seeds A and B
may range from 0 to 31328 and from 0 to 30081, respectively. If RANDOM
SEED is not speciﬁed at all or only by one integer number, the old
random-number generator (SHERPA 1.0.6 and older) will be used.


File: Sherpa.info,  Node: ANALYSIS,  Next: ANALYSIS_OUTPUT,  Prev: RANDOM_SEED,  Up: Run Parameters

4.1.4 ANALYSIS
--------------

The internal analysis can be switched on or oﬀ by setting the
ANALYSIS switch to 1 or 0, respectively. An output directory can be
speciﬁed by setting ANALYSIS_OUTPUT. The new directory will be
created w.r.t. the working directory.


File: Sherpa.info,  Node: ANALYSIS_OUTPUT,  Next: TIMEOUT,  Prev: ANALYSIS,  Up: Run Parameters

4.1.5 ANALYSIS_OUTPUT
---------------------

Directory for generated analysis histogram files.


File: Sherpa.info,  Node: TIMEOUT,  Next: SPIN_CORRELATIONS,  Prev: ANALYSIS_OUTPUT,  Up: Run Parameters

4.1.6 TIMEOUT
-------------

A run time limitation can be given in user CPU seconds through TIMEOUT.
This option is of some relevance when running SHERPA on a batch system.
Since in many cases jobs are just terminated, this allows to interrupt
a run, to store all relevant information and to restart it without any
loss. This is particularly interesting when carrying out long
integrations.  Contrary, setting the TIMEOUT variable to -1, which is
the default setting, translates into having no run time limitation at
all.


File: Sherpa.info,  Node: SPIN_CORRELATIONS,  Next: NUM_ACCURACY,  Prev: TIMEOUT,  Up: Run Parameters

4.1.7 SPIN_CORRELATIONS
-----------------------

The algorithm used to transfer spin-correlation information from
AMEGIC++ to HADRONS++ is switched off (=0) by default. It can be
switched on via SPIN CORRELATIONS=1. Process libraries have to be
re-created in this case.


File: Sherpa.info,  Node: NUM_ACCURACY,  Next: Event output formats,  Prev: SPIN_CORRELATIONS,  Up: Run Parameters

4.1.8 NUM_ACCURACY
------------------

The targeted numerical accuracy can be speciﬁed through NUM ACCURACY,
e.g. for comparing two numbers. This might have to be reduced if gauge
tests fail for numerical reasons.


File: Sherpa.info,  Node: SHERPA_CPP_PATH,  Next: SHERPA_LIB_PATH,  Prev: Event output formats,  Up: Run Parameters

4.1.9 SHERPA_CPP_PATH
---------------------

The path in which Sherpa will eventually store dynamically created C++
source code.  If not specified otherwise, sets `SHERPA_LIB_PATH' to
`$SHERPA_CPP_PATH/Process/lib'.


File: Sherpa.info,  Node: SHERPA_LIB_PATH,  Prev: SHERPA_CPP_PATH,  Up: Run Parameters

4.1.10 SHERPA_LIB_PATH
----------------------

The path in which Sherpa looks for dynamically bound libraries from
previously created C++ source code, cf. *Note SHERPA_CPP_PATH::.


File: Sherpa.info,  Node: Event output formats,  Next: SHERPA_CPP_PATH,  Prev: NUM_ACCURACY,  Up: Run Parameters

4.1.11 Event output formats
---------------------------

Sherpa provides the possibility to output events - either to file or to
screen - in its native and two other output formats: The HepEVT common
block structure or the HepMC format.  The authors of Sherpa assume that
the user is sufficiently acquainted with these formats when selecting
them.

There are two ways to specify the event record. First of all the switch
EVENT_MODE (*Note EVENT_MODE::.) results in the corresponding structure
being filled internally (and printed to screen, if the output-level is
set accordingly).

Second, if the events are to be written to file, the keywords listed
below can be used. With these keywords the filename's root can be
specified, i.e. HEPEVT_OUTPUT=filename will create files named
filename.#.hepevt, where the hash mark stands for an increasing number.

To write events directly to gzipped files instead of plain text, the
option -enable-gzip has to be specified during the installation.

* Menu:

* EVENT_MODE::        Format for screen display of events.
* SHERPA_OUTPUT::     Name of file to write event output in Sherpa format.
* HEPMC2_GENEVENT_OUTPUT:: Name of file to write event output in HepMC::IO_GenEvent format.
* HEPMC2_ASCII_OUTPUT:: Name of file to write event output in HepMC::IO_Ascii format (deprecated).
* HEPMC2_OUTPUT:: Name of file to write event output in HepMC::GenEvent::print format (deprecated).
* FILE_SIZE::         Number of events per file (default: 1000).
* EVT_FILE_PATH::     Directory where the files will be stored.
* OUTPUT_PRECISION::  Steers the precision of all numbers written to file.


File: Sherpa.info,  Node: EVENT_MODE,  Next: SHERPA_OUTPUT,  Up: Event output formats

4.1.11.1 EVENT_MODE
...................

This parameter specifies the format for displaying events on screen
when OUTPUT includes the "1" setting.  Available values:
   * EVENT_MODE=Sherpa (default, blob list output)

   * EVENT_MODE=HepMC (GenEvent print method)

   * EVENT_MODE=HepEvt (HepEvt common block)


File: Sherpa.info,  Node: SHERPA_OUTPUT,  Next: HEPMC2_GENEVENT_OUTPUT,  Prev: EVENT_MODE,  Up: Event output formats

4.1.11.2 SHERPA_OUTPUT
......................

Name of file to write event output in Sherpa format


File: Sherpa.info,  Node: HEPMC2_GENEVENT_OUTPUT,  Next: HEPMC2_ASCII_OUTPUT,  Prev: SHERPA_OUTPUT,  Up: Event output formats

4.1.11.3 HEPMC2_GENEVENT_OUTPUT
...............................

Name of file to write event output in HepMC::IO_GenEvent format.


File: Sherpa.info,  Node: HEPMC2_ASCII_OUTPUT,  Next: HEPMC2_OUTPUT,  Prev: HEPMC2_GENEVENT_OUTPUT,  Up: Event output formats

4.1.11.4 HEPMC2_ASCII_OUTPUT
............................

Name of file to write event output in HepMC::IO_Ascii format
(deprecated).


File: Sherpa.info,  Node: HEPMC2_OUTPUT,  Next: FILE_SIZE,  Prev: HEPMC2_ASCII_OUTPUT,  Up: Event output formats

4.1.11.5 HEPMC2_OUTPUT
......................

Name of file to write event output in HepMC::GenEvent::print format
(deprecated).


File: Sherpa.info,  Node: FILE_SIZE,  Next: EVT_FILE_PATH,  Prev: HEPMC2_OUTPUT,  Up: Event output formats

4.1.11.6 FILE_SIZE
..................

Number of events per file (default: 1000).


File: Sherpa.info,  Node: EVT_FILE_PATH,  Next: OUTPUT_PRECISION,  Prev: FILE_SIZE,  Up: Event output formats

4.1.11.7 EVT_FILE_PATH
......................

Directory where the files will be stored.


File: Sherpa.info,  Node: OUTPUT_PRECISION,  Prev: EVT_FILE_PATH,  Up: Event output formats

4.1.11.8 OUTPUT_PRECISION
.........................

Steers the precision of all numbers written to file.


File: Sherpa.info,  Node: Beam Parameters,  Next: ISR Parameters,  Prev: Run Parameters,  Up: Parameters

4.2 Beam Parameters
===================

The setup of the colliding beams is covered by the `(beam)' section of
the steering file or the beam data file `Beam.dat', respectively. The
_mandatory settings_ to be made are

   * The initial beam particles specified through `BEAM_1' and
     `BEAM_2', given by their PDG particle number. For (anti)protons
     and (positrons) electrons, e.g., these are given by (-)2212 or
     (-)11, respectively.  The code for photons is 22.

   * The energies of both incoming beams, defined through
     `BEAM_ENERGY_1' and `BEAM_ENERGY_2', given in units of GeV.

A List of available Beam spectra is given in section *Note Beam
Spectra::.

* Menu:

* Beam Spectra::  List of available beam spectra

The following parameters are used to steer the beam setup.

* Menu:

* BEAM_1::            PDG ID of the first beam particle.
* BEAM_2::            PDG ID of the second beam particle.
* BEAM_ENERGY_1::     Energy of the first beam particle.
* BEAM_ENERGY_2::     Energy of the second beam particle.
* BEAM_SPECTRUM_1::   The Beamstrahlung spectrum for the first beam.
* BEAM_SPECTRUM_2::   The Beamstrahlung spectrum for the second beam.
* SPECTRUM_FILE_1::   Spectrum file name for the first beam.
* SPECTRUM_FILE_2::   Spectrum file name for the second beam.
* BEAM_SMIN::         Minimum fraction of cms energy after Beamstrahlung.
* BEAM_SMAX::         Maximum fraction of cms energy after Beamstrahlung.
* K_PERP_MEAN_1::     Mean primordial transverse momentum of first beam.
* K_PERP_MEAN_2::     Mean primordial transverse momentum of second beam.
* K_PERP_SIGMA_1::    Width of primordial transverse momentum distribution of first beam.
* K_PERP_SIGMA_2::    Width of primordial transverse momentum distribution of second beam.


File: Sherpa.info,  Node: Beam Spectra,  Next: BEAM_1,  Up: Beam Parameters

4.2.1 Beam Spectra
------------------

Possible values are
`Monochromatic'
     The beam energy is unaltered and the beam particles remain
     unchanged.  That is the default and corresponds to ordinary
     hadron-hadron or lepton-lepton collisions.

`Laser_Backscattering'
     This can be used to describe the backscattering of a laser beam
     off initial leptons. The energy distribution of the emerging
     photon beams is modelled by the CompAZ parametrization, see Acta
     Phys.Polon. B34 (2003) 2741-2758 [hep-ex/0207021].  Note that this
     parametrization is valid only for the proposed TESLA photon
     collider, as various assumptions about the laser parameters and
     the initial lepton beam energy have been made.

`Simple_Compton'
     This corresponds to a simple light backscattering off the initial
     lepton beam and produces initial-state photons with a
     corresponding energy spectrum.

`EPA'
     This enables the equivalent photon approximation for colliding
     protons. The resulting beam particles are photons that follow a
     dipole form factor parametrization, see Phys. Rept. 15 (1974) 181.

`Spectrum_Reader'
     A user defined spectrum is used to describe the energy spectrum of
     the assumed new beam particles. The name of the corresponding
     spectrum file needs to be given through the keywords *Note
     SPECTRUM_FILE_1:: and *Note SPECTRUM_FILE_2::.


File: Sherpa.info,  Node: BEAM_1,  Next: BEAM_2,  Prev: Beam Spectra,  Up: Beam Parameters

4.2.2 BEAM_1
------------

This parameter specifies the PDG ID of the first (left) beam particle
before eventual Beamstrahlung.


File: Sherpa.info,  Node: BEAM_2,  Next: BEAM_ENERGY_1,  Prev: BEAM_1,  Up: Beam Parameters

4.2.3 BEAM_2
------------

This parameter specifies the PDG ID of the second (right) beam particle
before eventual Beamstrahlung.


File: Sherpa.info,  Node: BEAM_ENERGY_1,  Next: BEAM_ENERGY_2,  Prev: BEAM_2,  Up: Beam Parameters

4.2.4 BEAM_ENERGY_1
-------------------

This parameter specifies the energy of the first (left) beam particle
in GeV.


File: Sherpa.info,  Node: BEAM_ENERGY_2,  Next: BEAM_SPECTRUM_1,  Prev: BEAM_ENERGY_1,  Up: Beam Parameters

4.2.5 BEAM_ENERGY_2
-------------------

This parameter specifies the energy of the second (right) beam particle
in GeV.


File: Sherpa.info,  Node: BEAM_SPECTRUM_1,  Next: BEAM_SPECTRUM_2,  Prev: BEAM_ENERGY_2,  Up: Beam Parameters

4.2.6 BEAM_SPECTRUM_1
---------------------

This parameter specifies the Beamstrahlung spectrum for the first beam,
see *Note Beam Spectra::.


File: Sherpa.info,  Node: BEAM_SPECTRUM_2,  Next: SPECTRUM_FILE_1,  Prev: BEAM_SPECTRUM_1,  Up: Beam Parameters

4.2.7 BEAM_SPECTRUM_2
---------------------

This parameter specifies the Beamstrahlung spectrum for the second beam,
see *Note Beam Spectra::.


File: Sherpa.info,  Node: SPECTRUM_FILE_1,  Next: SPECTRUM_FILE_2,  Prev: BEAM_SPECTRUM_2,  Up: Beam Parameters

4.2.8 SPECTRUM_FILE_1
---------------------

This parameter specifies the spectrum file for the first beam, see
*Note Beam Spectra::.


File: Sherpa.info,  Node: SPECTRUM_FILE_2,  Next: BEAM_SMIN,  Prev: SPECTRUM_FILE_1,  Up: Beam Parameters

4.2.9 SPECTRUM_FILE_2
---------------------

This parameter specifies the spectrum file for the first beam, see
*Note Beam Spectra::.


File: Sherpa.info,  Node: BEAM_SMIN,  Next: BEAM_SMAX,  Prev: SPECTRUM_FILE_2,  Up: Beam Parameters

4.2.10 BEAM_SMIN
----------------

This parameter specifies the minimum fraction of cms energy squared
after Beamstrahlung. The reference value is the total centre of mass
energy squared of the collision, _not_ the centre of mass energy after
eventual Beamstrahlung.
The parameter can be specified using the internal interpreter, see
*Note Interpreter::, e.g. as `BEAM_SMIN sqr(20/E_CMS)'.


File: Sherpa.info,  Node: BEAM_SMAX,  Next: K_PERP_MEAN_1,  Prev: BEAM_SMIN,  Up: Beam Parameters

4.2.11 BEAM_SMAX
----------------

This parameter specifies the minimum fraction of cms energy squared
after Beamstrahlung. The reference value is the total centre of mass
energy squared of the collision, _not_ the centre of mass energy after
eventual Beamstrahlung.
The parameter can be specified using the internal interpreter, see
*Note Interpreter::, e.g. as `BEAM_SMIN sqr(0.99)'.


File: Sherpa.info,  Node: K_PERP_MEAN_1,  Next: K_PERP_MEAN_2,  Prev: BEAM_SMAX,  Up: Beam Parameters

4.2.12 K_PERP_MEAN_1
--------------------

This parameter specifies the mean intrinsic transverse momentum for the
first (left) beam in case of hadronic beams, such as protons.
The default value for protons is 0.33 GeV.


File: Sherpa.info,  Node: K_PERP_MEAN_2,  Next: K_PERP_SIGMA_1,  Prev: K_PERP_MEAN_1,  Up: Beam Parameters

4.2.13 K_PERP_MEAN_2
--------------------

This parameter specifies the mean intrinsic transverse momentum for the
second (right) beam in case of hadronic beams, such as protons.
The default value for protons is 0.33 GeV.


File: Sherpa.info,  Node: K_PERP_SIGMA_1,  Next: K_PERP_SIGMA_2,  Prev: K_PERP_MEAN_2,  Up: Beam Parameters

4.2.14 K_PERP_SIGMA_1
---------------------

This parameter specifies the width of the Gaussian distribution of
intrinsic transverse momentum for the first (left) beam in case of
hadronic beams, such as protons.
The default value for protons is 0.8 GeV.


File: Sherpa.info,  Node: K_PERP_SIGMA_2,  Prev: K_PERP_SIGMA_1,  Up: Beam Parameters

4.2.15 K_PERP_SIGMA_2
---------------------

This parameter specifies the width of the Gaussian distribution of
intrinsic transverse momentum for the first (left) beam in case of
hadronic beams, such as protons.
The default value for protons is 0.8 GeV.


File: Sherpa.info,  Node: ISR Parameters,  Next: Model Parameters,  Prev: Beam Parameters,  Up: Parameters

4.3 ISR Parameters
==================

The following parameters are used to steer the beam setup.

* Menu:

* BUNCH_1::           PDG ID of the first bunch particle.
* BUNCH_2::           PDG ID of the second bunch particle.
* ISR_1::             Whether to enable ISR for the first bunch.
* ISR_2::             Whether to enable ISR for the second bunch.
* ISR_SMIN::          Minimum fraction of cms energy after ISR.
* ISR_SMAX::          Maximum fraction of cms energy after ISR.
* ISR_E_ORDER::       The perturbative order of the electron PDF.
* ISR_E_SCHEME::      The beta scheme of the electron PDF.
* PDF_SET::           The name of the PDF set.
* PDF_SET_VERSION::   The additional version number of the pdf set.
* PDF_GRID_PATH::     The location of the PDF parameter/grid files.
* PDF_LIBRARY::       The name of the PDF library.
* SHOW_PDF_SETS::     Display available PDF sets.


File: Sherpa.info,  Node: BUNCH_1,  Next: BUNCH_2,  Up: ISR Parameters

4.3.1 BUNCH_1
-------------

This parameter specifies the PDG ID of the first (left) bunch particle,
i.e. the particle after eventual Beamstrahlung specified through the
beam parameters, see *Note Beam Parameters::.


File: Sherpa.info,  Node: BUNCH_2,  Next: ISR_1,  Prev: BUNCH_1,  Up: ISR Parameters

4.3.2 BUNCH_2
-------------

This parameter specifies the PDG ID of the second (right) bunch
particle, i.e. the particle after eventual Beamstrahlung specified
through the beam parameters, see *Note Beam Parameters::.


File: Sherpa.info,  Node: ISR_1,  Next: ISR_2,  Prev: BUNCH_2,  Up: ISR Parameters

4.3.3 ISR_1
-----------

This parameter specifies whether ISR is enabled for the first (left)
bunch particle, i.e. the particle after eventual Beamstrahlung
specified through the beam parameters, see *Note Beam Parameters::.
Possible values are `On' and `Off'.
For bunch particles with hadronic substructure, i.e.  hadrons and
photons, this amounts to employing a PDF to extract partons.


File: Sherpa.info,  Node: ISR_2,  Next: ISR_SMIN,  Prev: ISR_1,  Up: ISR Parameters

4.3.4 ISR_2
-----------

This parameter specifies whether ISR is enabled for the second (right)
bunch particle, i.e. the particle after eventual Beamstrahlung
specified through the beam parameters, see *Note Beam Parameters::.
Possible values are `On' and `Off'.
For bunch particles with hadronic substructure, i.e.  hadrons and
photons, this amounts to employing a PDF to extract partons.


File: Sherpa.info,  Node: ISR_SMIN,  Next: ISR_SMAX,  Prev: ISR_2,  Up: ISR Parameters

4.3.5 ISR_SMIN
--------------

This parameter specifies the minimum fraction of cms energy squared
after ISR. The reference value is the total centre of mass energy
squared of the collision, _not_ the centre of mass energy after
eventual Beamstrahlung.
The parameter can be specified using the internal interpreter, see
*Note Interpreter::, e.g. as `ISR_SMIN sqr(20/E_CMS)'.


File: Sherpa.info,  Node: ISR_SMAX,  Next: ISR_E_ORDER,  Prev: ISR_SMIN,  Up: ISR Parameters

4.3.6 ISR_SMAX
--------------

This parameter specifies the minimum fraction of cms energy squared
after ISR. The reference value is the total centre of mass energy
squared of the collision, _not_ the centre of mass energy after
eventual Beamstrahlung.
The parameter can be specified using the internal interpreter, see
*Note Interpreter::, e.g. as `ISR_SMIN sqr(0.99)'.


File: Sherpa.info,  Node: ISR_E_ORDER,  Next: ISR_E_SCHEME,  Prev: ISR_SMAX,  Up: ISR Parameters

4.3.7 ISR_E_ORDER
-----------------

This parameter sets the perturbative order of the electron structure
function.


File: Sherpa.info,  Node: ISR_E_SCHEME,  Next: PDF_SET,  Prev: ISR_E_ORDER,  Up: ISR Parameters

4.3.8 ISR_E_SCHEME
------------------

This parameter sets the beta-scheme of the electron structure function.


File: Sherpa.info,  Node: PDF_SET,  Next: PDF_SET_VERSION,  Prev: ISR_E_SCHEME,  Up: ISR Parameters

4.3.9 PDF_SET
-------------

This parameter allows to specifiy the PDF set for hadronic bunch
particles.


File: Sherpa.info,  Node: PDF_SET_VERSION,  Next: PDF_GRID_PATH,  Prev: PDF_SET,  Up: ISR Parameters

4.3.10 PDF_SET_VERSION
----------------------

This parameter allows to eventually select a specific version within
the chosen PDF set, see *Note PDF_SET::.


File: Sherpa.info,  Node: PDF_GRID_PATH,  Next: PDF_LIBRARY,  Prev: PDF_SET_VERSION,  Up: ISR Parameters

4.3.11 PDF_GRID_PATH
--------------------

This parameter specifies the path to the PDF parameter or grid file.


File: Sherpa.info,  Node: PDF_LIBRARY,  Next: SHOW_PDF_SETS,  Prev: PDF_GRID_PATH,  Up: ISR Parameters

4.3.12 PDF_LIBRARY
------------------

This parameter specifies the name of the PDF library.  Assuming
`PDF_LIBRARY=CTEQ6Sherpa', the dynamically bound PDF library will be
`libCTEQ6Sherpa.so'.  This file must be located in the library path of
the Sherpa installation or in the runtime library path given by *Note
SHERPA_LIB_PATH::. If LHAPDF is used, Sherpa searches for the LHAPDF
library in the corresponding installation path.


File: Sherpa.info,  Node: SHOW_PDF_SETS,  Prev: PDF_LIBRARY,  Up: ISR Parameters

4.3.13 SHOW_PDF_SETS
--------------------

Specifying `SHOW_PDF_SETS=1' on the command line instructs Sherpa to
print all available PDF sets contained in the library loaded by *Note
PDF_LIBRARY::.


File: Sherpa.info,  Node: Model Parameters,  Next: Matrix Elements,  Prev: ISR Parameters,  Up: Parameters

4.4 Model Parameters
====================

The interaction model setup is covered by the `(model)' section of the
steering file or the model data file `Model.dat', respectively.


File: Sherpa.info,  Node: Matrix Elements,  Next: Processes,  Prev: Model Parameters,  Up: Parameters

4.5 Matrix Elements
===================

The setup of matrix elements is covered by the `(me)' section of the
steering file or the ME data file `ME.dat', respectively.  The
_mandatory settings_ to be made are

   * The scale scheme

A List of available scale schemes is given in section

* Menu:

* Scale schemes::  List of available scale schemes.

The following parameters are used to steer the matrix element setup.

* Menu:

* RESULT_DIRECTORY::        The directory to store integration results.
* EVENT_GENERATION_MODE::   The event generation mode.
* COLOUR_SCHEME::           The colour handling scheme.
* HELICITY_SCHEME::         The helicity handling scheme.
* K_FACTOR_SCHEME::         The K-factor scheme.
* SCALE_SCHEME::            The scale scheme.
* FACTORIZATION_SCALE::     The factorization scale.
* RENORMALIZATION_SCALE::   The renormalization scale.


File: Sherpa.info,  Node: Scale schemes,  Next: RESULT_DIRECTORY,  Up: Matrix Elements

4.5.1 Scale schemes
-------------------

Sherpa provides several built-in scale schemes.  The options which are
currently available are

`VAR'
     Scales are specified by the parameters `RENORMALIZATION_SCALE' and
     `FACTORIZATION_SCALE' in a form which is understood by the
     internal interpreter, see *Note Interpreter::. If, for example the
     invariant mass of the lepton pair in Drell-Yan production is the
     desired scale, the corresponding setup reads


     FACTORIZATION_SCALE Abs2(p[2]+p[3])
     RENORMALIZATION_SCALE Abs2(p[2]+p[3])

`QCD'
     The matrix element is clustered onto a core 2->2 configuration
     using a k_T-type algorithm with recombination into on-shell
     partons.  Scales are defined as the minimum of the largest
     transverse momentum during clustering and the lowest invariant
     mass in the core process.


File: Sherpa.info,  Node: RESULT_DIRECTORY,  Next: EVENT_GENERATION_MODE,  Prev: Scale schemes,  Up: Matrix Elements

4.5.2 RESULT_DIRECTORY
----------------------

This parameter specifies the name of the directory which is used by
Sherpa to store the integration results and phasespace mappings. The
default is `Results/'.


File: Sherpa.info,  Node: EVENT_GENERATION_MODE,  Next: COLOUR_SCHEME,  Prev: RESULT_DIRECTORY,  Up: Matrix Elements

4.5.3 EVENT_GENERATION_MODE
---------------------------

This parameter specifies the event generation mode.  The two possible
modes are `Weighted' and `Unweighted'.


File: Sherpa.info,  Node: COLOUR_SCHEME,  Next: HELICITY_SCHEME,  Prev: EVENT_GENERATION_MODE,  Up: Matrix Elements

4.5.4 COLOUR_SCHEME
-------------------

This parameter secifies whether colours are sampled or summed over in
the matrix element simulation.  The two corresponding options are
`SAMPLE' and `SUM', respectively.


File: Sherpa.info,  Node: HELICITY_SCHEME,  Next: K_FACTOR_SCHEME,  Prev: COLOUR_SCHEME,  Up: Matrix Elements

4.5.5 HELICITY_SCHEME
---------------------

This parameter secifies whether helicities are sampled or summed over
in the matrix element simulation.  The two corresponding options are
`SAMPLE' and `SUM', respectively.


File: Sherpa.info,  Node: K_FACTOR_SCHEME,  Next: SCALE_SCHEME,  Prev: HELICITY_SCHEME,  Up: Matrix Elements

4.5.6 K_FACTOR_SCHEME
---------------------

This parameter specifies the K-factor scheme.  Within Sherpa, this
means the scheme to employ the renormalization scale for reweighting
matrix elements, which are initially computed with a fixed value for
the coupling constants. If, for example the strong coupling is to be
evaluated at the renormalization scale set by the specified scale setter
*Note Scale schemes::, the corresponding value is `QCD'. The available
options are

`NO'
     No reweighting

`QCD'
     reweighting of QCD couplings only

It is possible to implement a dedicated K-factor scheme within Sherpa.
For advice on this topic please contact the authors, *Note Authors::.


File: Sherpa.info,  Node: SCALE_SCHEME,  Next: FACTORIZATION_SCALE,  Prev: K_FACTOR_SCHEME,  Up: Matrix Elements

4.5.7 SCALE_SCHEME
------------------

This parameter specifies the scale scheme.  Within Sherpa, this means
the scheme to compute the renormalization and factorization scales.
For a list of available scale schemes, see *Note Scale schemes::.

It is possible to implement a dedicated scale scheme within Sherpa. For
advice on this topic please contact the authors, *Note Authors::.


File: Sherpa.info,  Node: FACTORIZATION_SCALE,  Next: RENORMALIZATION_SCALE,  Prev: SCALE_SCHEME,  Up: Matrix Elements

4.5.8 FACTORIZATION_SCALE
-------------------------

This parameter sepecifies how to potentially modify the factorization
scale computed by the scale scheme *Note Scale schemes::. The syntax
must be in a form which is understood by the internal interpreter *Note
Interpreter::. Examples are

   * FACTORIZATION_SCALE 2*MU_F

   * FACTORIZATION_SCALE MU_F/2


File: Sherpa.info,  Node: RENORMALIZATION_SCALE,  Prev: FACTORIZATION_SCALE,  Up: Matrix Elements

4.5.9 RENORMALIZATION_SCALE
---------------------------

This parameter sepecifies how to potentially modify the renormalization
scale computed by the scale scheme *Note Scale schemes::. The syntax
must be in a form which is understood by the internal interpreter *Note
Interpreter::. Examples are

   * RENORMALIZATION_SCALE 2*MU_F

   * RENORMALIZATION_SCALE MU_F/2


File: Sherpa.info,  Node: Processes,  Next: Selectors,  Prev: Matrix Elements,  Up: Parameters

4.6 Processes
=============

The process setup is covered by the `(processes)' section of the
steering file or the process data file `Processes.dat', respectively.

The following parameters are used to steer the process setup.

* Menu:

* Process::                 The process setup start tag.
* Decay::                   Tag to add an exclusive decay.
* DecayOS::                 Tag to add an exclusive on-shell decay.
* Renormalization_Scale::   Tag to set a process-specific scale.
* Factorization_Scale::     Tag to set a process-specific scale.
* Fixed_scale::             Tag to set a process-specific fixed scale.
* CKKW::                    Tag to setup multijet merging.
* Selector_File::           Tag to specify a specific selector file.
* Order_EW::                Tag to fix the electroweak order.
* Order_QCD::               Tag to fix the QCD order.
* Max_N_Quarks::            Tag to set the maximum number of quarks.
* Print_Graphs::            Tag to enable writeout of feynman graphs.
* Integration_Error::       Tag to set a specific integration error.
* Max_Epsilon::             Tag to set a specific epsilon for overweighting.
* Enhance_Factor::          Tag to set an enhance factor.
* Enhance_Function::        Tag to set an enhance function.
* NLO_QCD_Part::            Tag to setup QCD NLO processes.
* NLO_EW_Part::             Tag to setup electroweak NLO processes.
* Loop_Generator::          Tag to specifiy the loop ME generator.
* End process::             The process setup end tag.


File: Sherpa.info,  Node: Process,  Next: Decay,  Up: Processes

4.6.1 Process
-------------

This tag starts the setup of a process or a set of processes with
common properties. It must be followed by the specification of the
(core) process itself. The setup is completed by the `End process' tag,
see *Note End process::. Examples are

Process 93 93 -> 11 -11
     Sets up a Drell-Yan process group with light quarks in the initial
     state.

Process 11 -11 -> 93 93 93{3}
     Sets up jet production in e+e- collisions with up to three
     additional jets.


File: Sherpa.info,  Node: Decay,  Next: DecayOS,  Prev: Process,  Up: Processes

4.6.2 Decay
-----------

Specifies the exclusive decay of a particle produced in the matrix
element. The virtuality of the decaying particle is sampled according
to a Breit-Wigner distribution.  An example would be

Process 11 -11 -> 6[a] -6[b]
Decay 6[a] -> 5 24[c]
Decay -6[b] -> -5 -24[d]
Decay 24[c] -> -13 14
Decay -24[d] -> 94 94


File: Sherpa.info,  Node: DecayOS,  Next: Renormalization_Scale,  Prev: Decay,  Up: Processes

4.6.3 DecayOS
-------------

Specifies the exclusive decay of a particle produced in the matrix
element. The decaying particle is on mass-shell, i.e.  a strict
narrow-width approximation is used.  An example would be

Process 11 -11 -> 6[a] -6[b]
DecayOS 6[a] -> 5 24[c]
DecayOS -6[b] -> -5 -24[d]
DecayOS 24[c] -> -13 14
DecayOS -24[d] -> 94 94


File: Sherpa.info,  Node: Renormalization_Scale,  Next: Factorization_Scale,  Prev: DecayOS,  Up: Processes

4.6.4 Renormalization_Scale
---------------------------

Sets a process-specific renormalization scale.  The corresponding tag
must be given in a form, which is understood by the internal
interpreter, see *Note Interpreter::.


File: Sherpa.info,  Node: Factorization_Scale,  Next: Fixed_scale,  Prev: Renormalization_Scale,  Up: Processes

4.6.5 Factorization_Scale
-------------------------

Sets a process-specific factorization scale.  The corresponding tag
must be given in a form, which is understood by the internal
interpreter, see *Note Interpreter::.


File: Sherpa.info,  Node: Fixed_scale,  Next: CKKW,  Prev: Factorization_Scale,  Up: Processes

4.6.6 Fixed_scale
-----------------

Sets a process-specific renormalization and factorization scale.  The
corresponding tag must be given in a form, which is understood by the
internal interpreter, see *Note Interpreter::.


File: Sherpa.info,  Node: CKKW,  Next: Selector_File,  Prev: Fixed_scale,  Up: Processes

4.6.7 CKKW
----------

Sets up multijet merging according to JHEP05(2009)053. The additional
argument specifies the separation cut in the form (Q_{cut}/E_{cms})^2.
It can be given in any form which is understood by the internal
interpreter, see *Note Interpreter::.  Examples are

   * CKKW pow(10,-2.5)

   * CKKW sqr(20/E_CMS)


File: Sherpa.info,  Node: Selector_File,  Next: Order_EW,  Prev: CKKW,  Up: Processes

4.6.8 Selector_File
-------------------

Sets a process-specific selector file name.


File: Sherpa.info,  Node: Order_EW,  Next: Order_QCD,  Prev: Selector_File,  Up: Processes

4.6.9 Order_EW
--------------

Sets a process-specific electroweak order.  The given number is
exclusive, i.e. only matrix elements with exactly the given electroweak
order are generated.


File: Sherpa.info,  Node: Order_QCD,  Next: Max_N_Quarks,  Prev: Order_EW,  Up: Processes

4.6.10 Order_QCD
----------------

Sets a process-specific QCD order.  The given number is exclusive, i.e.
only matrix elements with exactly the given QCD order are generated.


File: Sherpa.info,  Node: Max_N_Quarks,  Next: Print_Graphs,  Prev: Order_QCD,  Up: Processes

4.6.11 Max_N_Quarks
-------------------

Limits the maximum number of quarks in the process to the given value.


File: Sherpa.info,  Node: Print_Graphs,  Next: Integration_Error,  Prev: Max_N_Quarks,  Up: Processes

4.6.12 Print_Graphs
-------------------

Writes out Feynman graphs in LaTeX format. The parameter specifies the
directory name in which the diagram information is stored.


File: Sherpa.info,  Node: Integration_Error,  Next: Max_Epsilon,  Prev: Print_Graphs,  Up: Processes

4.6.13 Integration_Error
------------------------

Sets a process-specific relative integration error target.

For multijet processes, this parameter can be specified per final state
multiplicity. An example would be

Process 93 93 -> 93 93 93{2}
Integration_Error 0.02 {3,4}

Here, the integration error target is set to 2% for 2->3 and 2->4
processes.


File: Sherpa.info,  Node: Max_Epsilon,  Next: Enhance_Factor,  Prev: Integration_Error,  Up: Processes

4.6.14 Max_Epsilon
------------------

Sets epsilon for maximum weight reduction.  The key idea is to allow
weights larger than the maximum during event generation, as long as the
fraction of the cross section represented by the corresponding events is
at most the epsilon factor times the total cross section. In other
words, the relative contribution of overweighted events to the
inclusive cross section is at most epsilon.


File: Sherpa.info,  Node: Enhance_Factor,  Next: Enhance_Function,  Prev: Max_Epsilon,  Up: Processes

4.6.15 Enhance_Factor
---------------------

Sets a process specific enhance factor.

For multijet processes, this parameter can be specified per final state
multiplicity. An example would be

Process 93 93 -> 93 93 93{2}
Enhance_Factor 4 {3}
Enhance_Factor 16 {4}

Here, 3-jet processes are enhanced by a factor of 4, 4-jet processes by
a factor of 16.


File: Sherpa.info,  Node: Enhance_Function,  Next: NLO_QCD_Part,  Prev: Enhance_Factor,  Up: Processes

4.6.16 Enhance_Function
-----------------------

Sets a process specific enhance function.

_This feature can only be used when generating weighted events._

For multijet processes, the parameter can be specified per final state
multiplicity. An example would be

Process 93 93 -> 11 -11 93{1}
Enhance_Function PPerp2(p[4]) {3}

Here, the 1-jet process is enhanced with the transverse momentum
squared of the jet.


File: Sherpa.info,  Node: NLO_QCD_Part,  Next: NLO_EW_Part,  Prev: Enhance_Function,  Up: Processes

4.6.17 NLO_QCD_Part
-------------------


File: Sherpa.info,  Node: NLO_EW_Part,  Next: Loop_Generator,  Prev: NLO_QCD_Part,  Up: Processes

4.6.18 NLO_EW_Part
------------------


File: Sherpa.info,  Node: Loop_Generator,  Next: End process,  Prev: NLO_EW_Part,  Up: Processes

4.6.19 Loop_Generator
---------------------

Set a process specific nametag for the desired loop-ME generator.


File: Sherpa.info,  Node: End process,  Prev: Loop_Generator,  Up: Processes

4.6.20 End process
------------------

Completes the setup of a process or a list of processes with common
properties.


File: Sherpa.info,  Node: Selectors,  Next: Integration,  Prev: Processes,  Up: Parameters

4.7 Selectors
=============

The setup of cuts at the matrix element level is covered by the
`(selector)' section of the steering file or the selector data file
`Selector.dat', respectively.

Sherpa provides the following selectors

* Menu:

* One particle selectors::    one particle selectors
* Two particle selectors::    two particle selectors
* Jet finders::               cuts on QCD partons
* Universal selector::        user-defined cuts


File: Sherpa.info,  Node: One particle selectors,  Next: Two particle selectors,  Up: Selectors

4.7.1 One particle selectors
----------------------------

The selectors listed here implement cuts on the matrix element level,
based on single particle kinematics.  The corresponding  syntax in
`Selector.dat' is

<keyword> <flavour code> <min value> <max value>

`<min value>' and `<max value>' are floating point numbers, which can
also be given in a form that is understood by the internal algebra
interpreter, see *Note Interpreter::.  The selectors act on _all_
possible particles with the given flavour. Their respective keywords are

`Energy'
     energy cut

`ET'
     transverse energy cut

`PT'
     transverse momentum cut

`Rapidity'
     rapidity cut

`PseudoRapidity'
     pseudorapidity cut


File: Sherpa.info,  Node: Two particle selectors,  Next: Jet finders,  Prev: One particle selectors,  Up: Selectors

4.7.2 Two particle selectors
----------------------------

The selectors listed here implement cuts on the matrix element level,
based on two particle kinematics.  The corresponding  syntax in
`Selector.dat' is

<keyword> <flavour1 code> <flavour2 code> <min value> <max value>

`<min value>' and `<max value>' are floating point numbers, which can
also be given in a form that is understood by the internal algebra
interpreter, see *Note Interpreter::.  The selectors act on _all_
possible particles with the given flavour. Their respective keywords are

`Mass'
     invariant mass

`Angle'
     angular separation (rad)

`BeamAngle'
     angular separation w.r.t. beam

     (`<flavour2 code>' is 0 or 1, referring to beam 1 or 2)

`DeltaEta'
     pseudorapidity separation

`DeltaPhi'
     azimuthal angle separation (rad)

`DeltaR'
     R separation


File: Sherpa.info,  Node: Jet finders,  Next: Universal selector,  Prev: Two particle selectors,  Up: Selectors

4.7.3 Jet finders
-----------------

There are two different types of jet finders

`JetFinder'
     k_T-algorithm

`ConeFinder'
     cone-algorithm

Their respective syntax is

JetFinder  <ycut>[<ycut decay 1>[<ycut decay 11>...]...]... <D parameter>
ConeFinder <min R>

For `JetFinder', it is possible to give different values of ycut in
individual subprocesses of a production-decay chain.  The square
brackets are then used to denote the decays.  In case only one uniform
set of ycut is to be used, the square brackets are left out.

`<ycut>', `<min R>' and `<D parameter>' are floating point numbers,
which can also be given in a form that is understood by the internal
algebra interpreter, see *Note Interpreter::.


File: Sherpa.info,  Node: Universal selector,  Prev: Jet finders,  Up: Selectors

4.7.4 Universal selector
------------------------

The universal selector is intended to implement non-stnadard cuts on
the matrix element level. Its syntax is

"<variable>" <kf1>,..,<kfn> <min1>,<max1>;..;<minn>,<maxn> [<order1>,...,<orderm>]

_No additional white spaces are allowed_

The first word has to be double-quoted, and contains the name of the
variable to cut on. The keywords for available predefined <variable>s
can be figured by running Sherpa `SHOW_VARIABLE_SYNTAX=1'.  Or
alternatively, an arbitrary cut variable can be constructed using the
internal interpreter, see *Note Interpreter::. This is invoked with the
command `Calc(...)'. In the formula specified there you have to use
place holders for the momenta of the particles: `p[0]' ... `p[n]' hold
the momenta of the respective particles `kf1' ... `kfn'. A list of
available vector functions and operators can be found here *Note
Interpreter::.

`<kf1>,..,<kfn>' specify the PDG codes of the particles the variable
has to be calculated from. In case this choice is not unique in the
final state, you have to specify multiple cut ranges
(`<min1>,<max1>;..;<minn>,<maxn>') for all (combinations of) particles
you want to cut on, separated by semicolons.

If no fourth argument is given, the order of cuts is determined
internally, according to Sherpa's process classification scheme.  This
then has to be matched if you want to have different cuts on certain
different particles in the matrix element. To do this, you should put
enough (for the possible number of combinations of your particles)
arbitrary ranges at first and run Sherpa with debugging output for the
universal selector: `Sherpa OUTPUT=2[Variable_Selector::Trigger|15]'.
This will start to produce lots of output during integration, at which
point you can interrupt the run (Ctrl-c). In the
`Variable_Selector::Trigger(): {...}' output you can see, which
particle combinations have been found and which cut range your selector
has held for them (vs. the arbitrary range you specified). From that
you should get an idea, in which order the cuts have to be specified.

If the fourth argument is given, particles are ordered before the cut
is applied. Possible orderings are `PT_UP', `ET_UP', `E_UP' and
`ETA_UP', (increasing p_T, E_T, E, eta). They have to be specified for
each of the particles, separated by commas.

Examples

Two-body transverse mass
     "mT" 11,-12 50,E_CMS

Cut on the pT of only the hardest lepton in the event
     "PT"   90   50.0,E_CMS   [PT_UP]

Using bool operations to restrict eta of the electron to |eta| < 1.1 or 1.5 < |eta| < 2.5
     "Calc(abs(Eta(p[0]))<1.1||(abs(Eta(p[0]))>1.5&&abs(Eta(p[0]))<2.5))"
     11 1,1

     Note the range 1,1 meaning true for bool operations.

Requesting opposite side tag jets in VBF would for example need a setup like this
     "Calc(Eta(p[0])*Eta(p[1]))" 93,93 -100,0 [PT_UP,PT_UP]

Restricting electron+photon mass to be outside of [87.0,97.0]:
     "Calc(Mass(p[0]+p[1])<87.0||Mass(p[0]+p[1])>97.0)" 11,22 1,1

In `Z[lepton lepton] Z[lepton lepton]', cut on mass of lepton-pairs produced from Z's:
     "m"   90,90   80,100;0,E_CMS;0,E_CMS;0,E_CMS;0,E_CMS;80,100;

     Here we use knowledge about the internal ordering to cut only on
     the correct lepton pairs.



File: Sherpa.info,  Node: Integration,  Next: Shower Parameters,  Prev: Selectors,  Up: Parameters

4.8 Integration
===============

The integration setup is covered by the `(integration)' section of the
steering file or the integration data file `Integration.dat',
respectively.

The following parameters are used to steer the integration.

* Menu:

* ERROR::                The realtice integration error target
* INTEGRATOR::           The integrator type
* VEGAS::                Whether to enable Vegas
* FINISH_OPTIMIZATION::  Whether to fully optimise the Vegas grid


File: Sherpa.info,  Node: ERROR,  Next: INTEGRATOR,  Up: Integration

4.8.1 ERROR
-----------

Specifies the relative integration error target.


File: Sherpa.info,  Node: INTEGRATOR,  Next: VEGAS,  Prev: ERROR,  Up: Integration

4.8.2 INTEGRATOR
----------------

Specifies the integrator. The possible integrator types depend on the
matrix element generator. Users should rely on the default value and
otherwise seek the help of the authors, see *Note Authors::.


File: Sherpa.info,  Node: VEGAS,  Next: FINISH_OPTIMIZATION,  Prev: INTEGRATOR,  Up: Integration

4.8.3 VEGAS
-----------

Specifies whether or not to employ Vegas for adaptive integration.  The
two possible values are `On' and `Off', the default being `On'.


File: Sherpa.info,  Node: FINISH_OPTIMIZATION,  Prev: VEGAS,  Up: Integration

4.8.4 FINISH_OPTIMIZATION
-------------------------

Specifies whether the full Vegas optimization is to be carried out.
The two possible options are `On' and `Off', the default being `On'.


File: Sherpa.info,  Node: Shower Parameters,  Next: MPI Parameters,  Prev: Integration,  Up: Parameters

4.9 Shower Parameters
=====================

The shower setup is covered by the `(shower)' section of the steering
file or the shower data file `Shower.dat', respectively.


File: Sherpa.info,  Node: MPI Parameters,  Prev: Shower Parameters,  Up: Parameters

4.10 MPI Parameters
===================

The multiple parton interaction (MPI) setup is covered by the `(mi)'
section of the steering file or the MPI data file `MI.dat',
respectively.

The following parameters are used to steer the MPI setup.

* Menu:

* MI_HANDLER::        The MPI handler
* SCALE_MIN::         The p_T cutoff
* PROFILE_FUNCTION::  The hadron profile function
* REFERENCE_SCALE::   The reference scale
* RESCALE_EXPONENT::  The rescaling exponent


File: Sherpa.info,  Node: MI_HANDLER,  Next: SCALE_MIN,  Up: MPI Parameters

4.10.1 MI_HANDLER
-----------------

Specifies the MPI handler. The two possible values at the moment are
`None' and `Amisic'.


File: Sherpa.info,  Node: SCALE_MIN,  Next: PROFILE_FUNCTION,  Prev: MI_HANDLER,  Up: MPI Parameters

4.10.2 SCALE_MIN
----------------

Specifies the transverse momentum integration cutoff in GeV.


File: Sherpa.info,  Node: PROFILE_FUNCTION,  Next: REFERENCE_SCALE,  Prev: SCALE_MIN,  Up: MPI Parameters

4.10.3 PROFILE_FUNCTION
-----------------------

Specifies the hadron profile function. The possible values are
`Exponential', `Gaussian' and `Double_Gaussian'.


File: Sherpa.info,  Node: REFERENCE_SCALE,  Next: RESCALE_EXPONENT,  Prev: PROFILE_FUNCTION,  Up: MPI Parameters

4.10.4 REFERENCE_SCALE
----------------------

Specifies the centre-of-mass energy at which the transverse momentum
integration cutoff is used as is, see *Note SCALE_MIN::.  This
parameter should not be changed by the user. The default is `1800',
corresponding to Tevatron Run I energies.


File: Sherpa.info,  Node: RESCALE_EXPONENT,  Prev: REFERENCE_SCALE,  Up: MPI Parameters

4.10.5 RESCALE_EXPONENT
-----------------------

Specifies the rescaling exponent for fixing the transverse momentum
integration cutoff at centre-of-mass energies different from the
reference scale, see *Note SCALE_MIN::, *Note REFERENCE_SCALE::.


File: Sherpa.info,  Node: Tips and Tricks,  Next: Customization,  Prev: Parameters,  Up: Top

5 Tips and Tricks
*****************

* Menu:

* Bash completion:: How to add bash completion for Sherpa parameters
* Rivet analyses:: How to analyse Sherpa events using Rivet
* Versioned installation:: How to install multiple Sherpa versions in the same prefix.


File: Sherpa.info,  Node: Bash completion,  Next: Rivet analyses,  Up: Tips and Tricks

5.1 Bash completion
===================

Sherpa will install a file named
`$prefix/share/SHERPA-MC/sherpa-completion' which contains tab
completion functionality for the bash shell. You simply have to source
it in your active shell session by running

  .  $prefix/share/SHERPA-MC/sherpa-completion

and you will be able to tab-complete any parameters on a Sherpa command
line.

To permanently enable this feature in your bash shell, you'll have to
add the source command above to your ~/.bashrc.


File: Sherpa.info,  Node: Rivet analyses,  Next: Versioned installation,  Prev: Bash completion,  Up: Tips and Tricks

5.2 Rivet analyses
==================

Sherpa is equipped with an interface to the analysis tool Rivet. To
enable it, Rivet and HepMC have to be installed (e.g. using the Rivet
bootstrap script) and your Sherpa compilation has to be configured with
the following options:

  ./configure --enable-hepmc2=/path/to/hepmc2 --enable-rivet=/path/to/rivet

(Note: Both paths are equal if you used the Rivet bootstrap script.)

To use the interface, specify the switch

  Sherpa ANALYSIS=Rivet

and create an analysis section in "Run.dat" that reads as follows:

  (analysis){
    BEGIN_RIVET {
      -H outputfile
      -a D0_2008_S7662670 CDF_2007_S7057202 D0_2004_S5992206 CDF_2008_S7828950
    } END_RIVET
  }(analysis)

The line starting with "-a" specifies which Rivet analyses to run and
the "-H" switch sets the output file that the histograms are written to.

You can also use "TOOLS/make-html" to create webpages from Rivet's
output files:

  (source /path/to/rivetenv.sh)   # see below
  TOOLS/make-html -o output/ file1.aida [file2.aida, ...]
  firefox output/index.html &

If your Rivet installation is not in a standard location, the bootstrap
script should have created a "rivetenv.sh" which you have to source
before running the "make-html" script.


File: Sherpa.info,  Node: Versioned installation,  Prev: Rivet analyses,  Up: Tips and Tricks

5.3 Versioned installation
==========================

If you want to install different Sherpa versions into the same prefix
(e.g. /usr/local), you have to enable versioning of the installed
directories by using the configure option `--enable-versioning'.
Optionally you can even pass an argument to this parameter of what you
want the version tag to look like.


File: Sherpa.info,  Node: Customization,  Next: Authors,  Prev: Tips and Tricks,  Up: Top

6 Customization
***************

Customizing Sherpa according to your needs.

Sherpa can be easily extended with certain user defined tools.  To this
extent, a corresponding class must be written, equipped with a
corresponding getter function and compiled into an external library
which can be linked to Sherpa at runtime.  Several specific examples
are listed in the following sections.

* Menu:

* External RNG:: How to add an external random number generator.
* External PDF:: How to add an external PDF.


File: Sherpa.info,  Node: External RNG,  Next: External PDF,  Up: Customization

6.1 External RNG
================

To use an external Random Number Generator (RNG) in Sherpa, you need to
provide an interface to your RNG in an external dynamic library. This
library is then loaded at runtime and Sherpa replaces the internal RNG
with the one provided.

_In this case Sherpa will not attempt to set, save, read or restore the
RNG_

The corresponding code for the RNG interface is

#include "ATOOLS/Math/Random.H"

using namespace ATOOLS;

class Example_RNG: public External_RNG {
public:
  double Get()
  {
    // your code goes here ...
  }
};// end of class Example_RNG

// this makes Example_RNG loadable in Sherpa
DECLARE_GETTER(Example_RNG_Getter,"Example_RNG",External_RNG,RNG_Key);
External_RNG *Example_RNG_Getter::operator()(const RNG_Key &arg) const
{ return new Example_RNG(); }
// this eventually prints a help message
void Example_RNG_Getter::PrintInfo(std::ostream &str,const size_t width) const
{ str<<"example RNG interface"; }

If the code is compiled into a library called libExampleRNG.so, then
this library is loaded dynamically in Sherpa using the command
`SHERPA_LDADD=ExampleRNG' either on the command line or in `Run.dat'.
If the library is bound at compile time, like e.g.  in cmt, you may
skip this step.

Finally Sherpa is instructed to retrieve the external RNG by specifying
`EXTERNAL_RNG=Example_RNG' on the command line or in `Run.dat'.


File: Sherpa.info,  Node: External PDF,  Prev: External RNG,  Up: Customization

6.2 External PDF
================

To use an external PDF (not included in LHAPDF) in Sherpa, you need to
provide an interface to your PDF in an external dynamic library. This
library is then loaded at runtime and it is possible within Sherpa to
access all PDFs included.

The simplest C++ code to implement your interface looks as follows

#include "PDF/Main/PDF_Base.H"

using namespace PDF;

class Example_PDF: public PDF_Base {
public:
  void Calculate(double x,double Q2)
  {
    // calculate values x f_a(x,Q2) for all a
  }
  double GetXPDF(const ATOOLS::Flavour a)
  {
    // return x f_a(x,Q2)
  }
  virtual PDF_Base *GetCopy()
  {
    return new Example_PDF();
  }
};// end of class Example_PDF

// this makes Example_PDF loadable in Sherpa
DECLARE_PDF_GETTER(Example_PDF_Getter);
PDF_Base *Example_PDF_Getter::operator()(const Parameter_Type &args) const
{ return new Example_PDF(); }
// this eventually prints a help message
void Example_PDF_Getter::PrintInfo
(std::ostream &str,const size_t width) const
{ str<<"example PDF"; }
// this lets Sherpa initialize and unload the library
Example_PDF_Getter *p_get=NULL;
extern "C" void InitPDFLib(const std::string &path)
{ p_get = new Example_PDF_Getter("ExamplePDF"); }
extern "C" void ExitPDFLib() { delete p_get; }

If the code is compiled into a library called libExamplePDFSherpa.so,
then this library is loaded dynamically in Sherpa using
`PDF_LIBRARY=ExamplePDFSherpa' either on the command line, in `Run.dat'
or in `ISR.dat'. If the library is bound at compile time, like e.g. in
cmt, you may skip this step.  It is now possible to list all accessible
PDF sets by specifying `SHOW_PDF_SETS=1' on the command line.

Finally Sherpa is instructed to retrieve the external PDF by specifying
`PDF_SET=ExamplePDF' on the command line, in `Run.dat' or in `ISR.dat'.


File: Sherpa.info,  Node: Authors,  Next: Copying,  Prev: Customization,  Up: Top

7 Authors
*********

Sherpa was written by the Sherpa Team, see http://www.sherpa-mc.de.


File: Sherpa.info,  Node: Copying,  Next: Index,  Prev: Authors,  Up: Top

8 Copying
*********

Sherpa is free  software.  You can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation. You should have received a copy of the GNU
General Public License along with the source for Sherpa; see the file
COPYING. If not, write to the Free Software Foundation, 59 Temple
Place, Suite 330, Boston, MA  02111-1307, USA.

Sherpa is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

Sherpa was created during the Marie Curie RTN's HEPTOOLS and MCnet.
The MCnet Guidelines apply, see the file GUIDELINES and
http://www.montecarlonet.org/index.php?p=Publications/Guidelines.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU General Public License.


File: Sherpa.info,  Node: Index,  Prev: Copying,  Up: Top

Appendix A Index
****************

 [index ]
* Menu:

* ANALYSIS:                              ANALYSIS.              (line 6)
* ANALYSIS_OUTPUT:                       ANALYSIS_OUTPUT.       (line 6)
* BEAM_1:                                BEAM_1.                (line 6)
* BEAM_2:                                BEAM_2.                (line 6)
* BEAM_ENERGY_1:                         BEAM_ENERGY_1.         (line 6)
* BEAM_ENERGY_2:                         BEAM_ENERGY_2.         (line 6)
* BEAM_SMAX:                             BEAM_SMAX.             (line 6)
* BEAM_SMIN:                             BEAM_SMIN.             (line 6)
* BEAM_SPECTRUM_1:                       BEAM_SPECTRUM_1.       (line 6)
* BEAM_SPECTRUM_2:                       BEAM_SPECTRUM_2.       (line 6)
* BUNCH_1:                               BUNCH_1.               (line 6)
* BUNCH_2:                               BUNCH_2.               (line 6)
* COLOUR_SCHEME:                         COLOUR_SCHEME.         (line 6)
* ERROR:                                 ERROR.                 (line 6)
* EVENT_GENERATION_MODE:                 EVENT_GENERATION_MODE. (line 6)
* EVENT_MODE:                            EVENT_MODE.            (line 6)
* EVENTS:                                EVENTS.                (line 6)
* EVT_FILE_PATH:                         EVT_FILE_PATH.         (line 6)
* FACTORIZATION_SCALE:                   FACTORIZATION_SCALE.   (line 6)
* FILE_SIZE:                             FILE_SIZE.             (line 6)
* FINISH_OPTIMIZATION:                   FINISH_OPTIMIZATION.   (line 6)
* HELICITY_SCHEME:                       HELICITY_SCHEME.       (line 6)
* HEPMC2_ASCII_OUTPUT:                   HEPMC2_ASCII_OUTPUT.   (line 6)
* HEPMC2_GENEVENT_OUTPUT:                HEPMC2_GENEVENT_OUTPUT.
                                                                (line 6)
* HEPMC2_OUTPUT:                         HEPMC2_OUTPUT.         (line 6)
* INTEGRATOR:                            INTEGRATOR.            (line 6)
* ISR_1:                                 ISR_1.                 (line 6)
* ISR_2:                                 ISR_2.                 (line 6)
* ISR_E_ORDER:                           ISR_E_ORDER.           (line 6)
* ISR_E_SCHEME:                          ISR_E_SCHEME.          (line 6)
* ISR_SMAX:                              ISR_SMAX.              (line 6)
* ISR_SMIN:                              ISR_SMIN.              (line 6)
* K_FACTOR_SCHEME:                       K_FACTOR_SCHEME.       (line 6)
* K_PERP_MEAN_1:                         K_PERP_MEAN_1.         (line 6)
* K_PERP_MEAN_2:                         K_PERP_MEAN_2.         (line 6)
* K_PERP_SIGMA_1:                        K_PERP_SIGMA_1.        (line 6)
* K_PERP_SIGMA_2:                        K_PERP_SIGMA_2.        (line 6)
* MI_HANDLER:                            MI_HANDLER.            (line 6)
* NUM_ACCURACY:                          NUM_ACCURACY.          (line 6)
* OUTPUT:                                OUTPUT.                (line 6)
* OUTPUT_PRECISION:                      OUTPUT_PRECISION.      (line 6)
* PDF_GRID_PATH:                         PDF_GRID_PATH.         (line 6)
* PDF_LIBRARY:                           PDF_LIBRARY.           (line 6)
* PDF_SET:                               PDF_SET.               (line 6)
* PDF_SET_VERSION:                       PDF_SET_VERSION.       (line 6)
* PROFILE_FUNCTION:                      PROFILE_FUNCTION.      (line 6)
* RANDOM_SEED:                           RANDOM_SEED.           (line 6)
* REFERENCE_SCALE:                       REFERENCE_SCALE.       (line 6)
* RENORMALIZATION_SCALE:                 RENORMALIZATION_SCALE. (line 6)
* RESCALE_EXPONENT:                      RESCALE_EXPONENT.      (line 6)
* RESULT_DIRECTORY:                      RESULT_DIRECTORY.      (line 6)
* SCALE_MIN:                             SCALE_MIN.             (line 6)
* SCALE_SCHEME:                          SCALE_SCHEME.          (line 6)
* SHERPA_CPP_PATH:                       SHERPA_CPP_PATH.       (line 6)
* SHERPA_LIB_PATH:                       SHERPA_LIB_PATH.       (line 6)
* SHERPA_OUTPUT:                         SHERPA_OUTPUT.         (line 6)
* SHOW_PDF_SETS:                         SHOW_PDF_SETS.         (line 6)
* SPECTRUM_FILE_1:                       SPECTRUM_FILE_1.       (line 6)
* SPECTRUM_FILE_2:                       SPECTRUM_FILE_2.       (line 6)
* SPIN_CORRELATIONS:                     SPIN_CORRELATIONS.     (line 6)
* TIMEOUT:                               TIMEOUT.               (line 6)
* VEGAS:                                 VEGAS.                 (line 6)



Tag Table:
Node: Top73
Node: Introduction567
Node: Command line1254
Node: Input structure1853
Node: Interpreter4156
Node: Tags6103
Node: Parameters6721
Node: Run Parameters7578
Node: EVENTS8353
Node: OUTPUT8516
Node: RANDOM_SEED9021
Node: ANALYSIS9568
Node: ANALYSIS_OUTPUT9938
Node: TIMEOUT10133
Node: SPIN_CORRELATIONS10764
Node: NUM_ACCURACY11140
Node: SHERPA_CPP_PATH11475
Node: SHERPA_LIB_PATH11811
Node: Event output formats12082
Node: EVENT_MODE13826
Node: SHERPA_OUTPUT14226
Node: HEPMC2_GENEVENT_OUTPUT14446
Node: HEPMC2_ASCII_OUTPUT14706
Node: HEPMC2_OUTPUT14970
Node: FILE_SIZE15216
Node: EVT_FILE_PATH15409
Node: OUTPUT_PRECISION15612
Node: Beam Parameters15814
Node: Beam Spectra17694
Node: BEAM_119187
Node: BEAM_219410
Node: BEAM_ENERGY_119636
Node: BEAM_ENERGY_219858
Node: BEAM_SPECTRUM_120091
Node: BEAM_SPECTRUM_220348
Node: SPECTRUM_FILE_120608
Node: SPECTRUM_FILE_220858
Node: BEAM_SMIN21102
Node: BEAM_SMAX21596
Node: K_PERP_MEAN_122084
Node: K_PERP_MEAN_222410
Node: K_PERP_SIGMA_122743
Node: K_PERP_SIGMA_223109
Node: ISR Parameters23453
Node: BUNCH_124457
Node: BUNCH_224748
Node: ISR_125055
Node: ISR_225530
Node: ISR_SMIN26008
Node: ISR_SMAX26474
Node: ISR_E_ORDER26942
Node: ISR_E_SCHEME27159
Node: PDF_SET27370
Node: PDF_SET_VERSION27579
Node: PDF_GRID_PATH27841
Node: PDF_LIBRARY28062
Node: SHOW_PDF_SETS28599
Node: Model Parameters28881
Node: Matrix Elements29170
Node: Scale schemes30149
Node: RESULT_DIRECTORY31100
Node: EVENT_GENERATION_MODE31428
Node: COLOUR_SCHEME31715
Node: HELICITY_SCHEME32046
Node: K_FACTOR_SCHEME32378
Node: SCALE_SCHEME33180
Node: FACTORIZATION_SCALE33679
Node: RENORMALIZATION_SCALE34160
Node: Processes34630
Node: Process36248
Node: Decay36814
Node: DecayOS37234
Node: Renormalization_Scale37678
Node: Factorization_Scale38016
Node: Fixed_scale38352
Node: CKKW38675
Node: Selector_File39097
Node: Order_EW39272
Node: Order_QCD39555
Node: Max_N_Quarks39825
Node: Print_Graphs40035
Node: Integration_Error40312
Node: Max_Epsilon40771
Node: Enhance_Factor41305
Node: Enhance_Function41765
Node: NLO_QCD_Part42286
Node: NLO_EW_Part42430
Node: Loop_Generator42570
Node: End process42782
Node: Selectors42982
Node: One particle selectors43523
Node: Two particle selectors44330
Node: Jet finders45304
Node: Universal selector46140
Node: Integration49498
Node: ERROR50075
Node: INTEGRATOR50222
Node: VEGAS50544
Node: FINISH_OPTIMIZATION50806
Node: Shower Parameters51078
Node: MPI Parameters51358
Node: MI_HANDLER51911
Node: SCALE_MIN52118
Node: PROFILE_FUNCTION52319
Node: REFERENCE_SCALE52590
Node: RESCALE_EXPONENT52996
Node: Tips and Tricks53335
Node: Bash completion53694
Node: Rivet analyses54282
Node: Versioned installation55661
Node: Customization56121
Node: External RNG56723
Node: External PDF58193
Node: Authors60102
Node: Copying60277
Node: Index61308

End Tag Table
