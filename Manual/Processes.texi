@node Processes
@section Processes

The process setup is covered by the `(processes)' section of
the steering file or the process data file `Processes.dat', respectively.

The following parameters are used to steer the process setup.

@menu
* Process::                 The process setup start tag.
* Decay::                   Tag to add an exclusive decay.
* DecayOS::                 Tag to add an exclusive on-shell decay.
* Scales::                  Tag to set a process-specific scale.
* Couplings::               Tag to set process-specific couplings.
* CKKW::                    Tag to setup multijet merging.
* Selector_File::           Tag to specify a specific selector file.
* Order_EW::                Tag to fix the electroweak order.
* Max_Order_EW::            Tag to fix the maximum electroweak order.
* Order_QCD::               Tag to fix the QCD order.
* Max_Order_QCD::           Tag to fix the maximum QCD order.
* Max_N_Quarks::            Tag to set the maximum number of quarks.
* Print_Graphs::            Tag to enable writeout of feynman graphs.
* Integration_Error::       Tag to set a specific integration error.
* Max_Epsilon::             Tag to set a specific epsilon for overweighting.
* Enhance_Factor::          Tag to set an enhance factor.
* Enhance_Function::        Tag to set an enhance function.
* NLO_QCD_Part::            Tag to setup QCD NLO processes.
* NLO_EW_Part::             Tag to setup electroweak NLO processes.
* Loop_Generator::          Tag to specifiy the loop ME generator.
* End process::             The process setup end tag.
@end menu


@node Process
@subsection Process
This tag starts the setup of a process or a set of processes 
with common properties. It must be followed by the specification 
of the (core) process itself. The setup is completed by the
@option{End process} tag, see @ref{End process}. The initial and
final state particles are specified by their PDG codes, or by 
particle containers, see @ref{Particle containers}. Examples are

@table @asis
@item Process 93 93 -> 11 -11
Sets up a Drell-Yan process group with light quarks
in the initial state.
@item Process 11 -11 -> 93 93 93@{3@}
Sets up jet production in e+e- collisions with up to three
additional jets.
@end table

The syntax for specifying processes is explained in the following 
sections:

@menu
* PDG codes::
* Particle containers::
* Curly brackets::
@end menu

@node PDG codes
@subsubsection PDG codes

Initial and final state particles are specified using their 
PDG codes
(cf. @uref{http://pdg.lbl.gov/2009/mcdata/mc_particle_id_contents.html,,PDG}).
A list of particles with their codes, and some of their properties,
is printed at the start of each Sherpa run, when the @ref{OUTPUT} is set 
at level @option{2}.

@node Particle containers
@subsubsection Particle containers

Sherpa contains a set of containers that collect
particles with similar properties, namely

@itemize @bullet
  @item  lepton (carrying number @code{90}), 
  @item  neutrino (carrying number @code{91}),
  @item  fermion (carrying number @code{92}),
  @item  jet (carrying number @code{93}),
  @item  quark (carrying number @code{94}).
@end itemize

These containers hold all massless particles and anti-particles 
of the denoted type and allow for a more efficient definition of 
initial and final states to be considered. The jet container consists 
of the gluon and all massless quarks (as set by @code{MASS[..]=0.0} or
@code{MASSIVE[..]=0}). A list of particle containers
is printed at the start of each Sherpa run, when the @ref{OUTPUT} is set 
at level @option{2}. 

@cindex PARTICLE_CONTAINER
It is also possible to define a custom particle container using the keyword 
@code{PARTICLE_CONTAINER} either on the command line or in the @code{(model)}
section of the input file. The container must be given an unassigned particle 
ID (kf-code) and its name and content must be specified. An example would be 
the collection of all down-type quarks, which could be declared as
@verbatim
  PARTICLE_CONTAINER 98 downs 1 3 5;
@end verbatim



@node Curly brackets
@subsubsection Curly brackets

The curly bracket notation when specifying a process allows up to 
a certain number of jets to be included in the final state. This
is easily seen from an example, 
@table @asis
@item Process 11 -11 -> 93 93 93@{3@}
Sets up jet production in e+e- collisions. The matix element final state may be
2, 3, 4 or 5 light partons or gluons.
@end table


@node Decay
@subsection Decay
Specifies the exclusive decay of a particle produced in the
matrix element. The virtuality of the decaying particle is sampled
according to a Breit-Wigner distribution.
An example would be
@verbatim
Process 11 -11 -> 6[a] -6[b]
Decay 6[a] -> 5 24[c]
Decay -6[b] -> -5 -24[d]
Decay 24[c] -> -13 14
Decay -24[d] -> 94 94
@end verbatim


@node DecayOS
@subsection DecayOS
Specifies the exclusive decay of a particle produced in the
matrix element. The decaying particle is on mass-shell, i.e.
a strict narrow-width approximation is used.
An example would be
@verbatim
Process 11 -11 -> 6[a] -6[b]
DecayOS 6[a] -> 5 24[c]
DecayOS -6[b] -> -5 -24[d]
DecayOS 24[c] -> -13 14
DecayOS -24[d] -> 94 94
@end verbatim


@node Scales
@subsection Scales
Sets a process-specific scale.
For the corresponding syntax see @ref{SCALES}.

@node Couplings
@subsection Couplings
Sets process-specific couplings.
For the corresponding syntax see @ref{COUPLINGS}.

@node CKKW
@subsection CKKW
Sets up multijet merging according to @mycite{Hoeche2009rj}.
The additional argument specifies the separation cut
in the form (Q_@{cut@}/E_@{cms@})^2.
It can be given in any form which is understood by the internal
interpreter, see @ref{Interpreter}.
Examples are

@itemize
@item CKKW pow(10,-2.5)
@item CKKW sqr(20/E_CMS)
@end itemize


@node Selector_File
@subsection Selector_File
Sets a process-specific selector file name.


@node Order_EW
@subsection Order_EW
Sets a process-specific electroweak order.
The given number is exclusive, i.e. only matrix elements
with exactly the given order in the electroweak coupling
are generated.

Note that for decay chains with Amegic this setting 
applies to the core process only, while with Comix it applies to
the full process, see @ref{Decay} and @ref{DecayOS}.


@node Max_Order_EW
@subsection Max_Order_EW
Sets a process-specific maximum electroweak order.
The given number is inclusive, i.e. matrix elements
with up to the given order in the electroweak coupling
are generated.

Note that for decay chains with Amegic this setting 
applies to the core process only, while with Comix it applies to
the full process, see @ref{Decay} and @ref{DecayOS}.


@node Order_QCD
@subsection Order_QCD
Sets a process-specific QCD order.
The given number is exclusive, i.e. only matrix elements
with exactly the given order in the strong coupling are generated.

Note that for decay chains with Amegic this setting 
applies to the core process only, while with Comix it applies to
the full process, see @ref{Decay} and @ref{DecayOS}.


@node Max_Order_QCD
@subsection Max_Order_QCD
Sets a process-specific maximum QCD order.
The given number is inclusive, i.e. matrix elements
with up to the given order in the strong coupling are generated.

Note that for decay chains with Amegic this setting 
applies to the core process only, while with Comix it applies to
the full process, see @ref{Decay} and @ref{DecayOS}.


@node Max_N_Quarks
@subsection Max_N_Quarks
Limits the maximum number of quarks in the process to the
given value.


@node Print_Graphs
@subsection Print_Graphs
Writes out Feynman graphs in LaTeX format. 
@itemize @bullet
@item When using Comix, 
the parameter specifies the directory name in which the diagram 
information is stored. This directory is created automatically
by Sherpa.

@item When using AMEGIC++, the parameter must be
set to @option{1}, and the diagram information is stored in
the directory @code{Process/P<n>_<m>}, where n is the number 
of incoming and m the number of outgoing particles of the 
process it has generated.
@end itemize

After Sherpa has run, there will be a @code{.tex}-file located in the 
diagram information directory with the name @code{<process>.tex}. This 
has to be compiled by using @code{latex <process>.tex}, which 
produces a @code{.mp}-file. Enter @code{mpost *.mp} and 
again @code{latex <process>.tex} in order to produce the 
@code{.dvi}-file @code{<process>.dvi} containing the Feynman diagrams.

@node Integration_Error
@subsection Integration_Error
Sets a process-specific relative integration error target.

For multijet processes, this parameter can be specified
per final state multiplicity. An example would be
@verbatim
Process 93 93 -> 93 93 93{2}
Integration_Error 0.02 {3,4}
@end verbatim

Here, the integration error target is set to 2% for
2->3 and 2->4 processes.


@node Max_Epsilon
@subsection Max_Epsilon
Sets epsilon for maximum weight reduction.
The key idea is to allow weights larger than
the maximum during event generation,
as long as the fraction of the cross section
represented by corresponding events is
at most the epsilon factor times the total
cross section. In other words, the relative
contribution of overweighted events to the
inclusive cross section is at most epsilon.


@node Enhance_Factor
@subsection Enhance_Factor
Sets a process specific enhance factor.

For multijet processes, this parameter can be specified
per final state multiplicity. An example would be
@verbatim
Process 93 93 -> 93 93 93{2}
Enhance_Factor 4 {3}
Enhance_Factor 16 {4}
@end verbatim

Here, 3-jet processes are enhanced by a factor of 4,
4-jet processes by a factor of 16.


@node Enhance_Function
@subsection Enhance_Function
Sets a process specific enhance function.

@emph{This feature can only be used when generating weighted events.}

For multijet processes, the parameter can be specified
per final state multiplicity. An example would be
@verbatim
Process 93 93 -> 11 -11 93{1}
Enhance_Function PPerp2(p[4]) {3}
@end verbatim

Here, the 1-jet process is enhanced with the
transverse momentum squared of the jet.

Note that the convergence of the Monte Carlo integration can be worse
if enhance functions are employed and therefore the integration can take
significantly longer. The reason is that the default phase space 
mapping, which is constructed according to diagrammatic information from
hard matrix elements, is not suited for event generation including
enhancement. It must first be adapted, which, depending on the enhance 
function and the final state multiplicity, can be an intricate task. 

@emph{If Sherpa cannot achieve an integration error target due to the use
 of enhance functions, it might be appropriate to locally redefine this
 error target}, see @ref{Integration_Error}.


@node NLO_QCD_Part
@subsection NLO_QCD_Part

Specifies which pieces of a QCD NLO calculation are computed.
Possible choices are

@itemize
@item B  ... born term
@item RS ... real correction, regularized using Catani-Seymour subtraction terms
@item I  ... integrated subtraction terms
@item V  ... virtual (one-loop) correction
@item P  ... check cancelation of epsilon poles between 'I' and 'V' 
@end itemize

Different pieces can be combined in the processes setup. Only pieces with the same number
of final state particles and the same order in alpha_S can be treated as one process, otherwise
they will be automatically split up.

Note that Sherpa includes only a very limited selection of one-loop corrections. For processes
not included external codes can be interfaced, see @ref{External one-loop ME}

@node NLO_EW_Part
@subsection NLO_EW_Part


@node Loop_Generator
@subsection Loop_Generator
Set a process specific nametag for the desired
loop-ME generator. The only Sherpa-native option is @code{Internal} with a few 
hard coded loop matrix elements, e.g. @ref{NLO_W}.

@subsubsection WhiteHat Interface

Another source for loop matrix elements is @code{WhiteHat}. To use this Sherpa 
has to be linked to WhiteHat during installation by using the configure option 
@code{--enable-whitehat=/path/to/whitehat}.


@node End process
@subsection End process
Completes the setup of a process or a list of processes
with common properties.

